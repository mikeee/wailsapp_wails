{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Welcome to The Wails Project</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>[darwin] add getPrimaryScreen/getScreens to impl by @tmclane in   https://github.com/wailsapp/wails/pull/2618</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed background colours of examples on Windows by   mmgvh in   #2750.</li> <li>Fixed default context menus by mmgvh in   #2753.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":""},{"location":"changelog/#removed","title":"Removed","text":""},{"location":"changelog/#deprecated","title":"Deprecated","text":""},{"location":"changelog/#security","title":"Security","text":""},{"location":"whats-new/","title":"What's new in v3?","text":"<p>Note</p> <p>this list.</p>"},{"location":"whats-new/#multiple-windows","title":"Multiple Windows","text":"<p>It's now possible to create multiple windows and configure each one independently.</p> <pre><code>package main\nimport (\n_ \"embed\"\n\"log\"\n\"github.com/wailsapp/wails/v3/pkg/application\"\n)\n//go:embed assets/*\nvar assets embed.FS\nfunc main() {\napp := application.New(application.Options{\nName:        \"Multi Window Demo\",\nAssets: application.AssetOptions{\nFS: assets,\n},\n})\nwindow1 := app.NewWebviewWindowWithOptions(application.WebviewWindowOptions{\nTitle:  \"Window 1\",\n})\nwindow2 := app.NewWebviewWindowWithOptions(application.WebviewWindowOptions{\nTitle:  \"Window 2\",\n})\n// load the embedded html from the embed.FS\nwindow1.SetURL(\"/\")\nwindow1.Center()\n// Load an external URL\nwindow2.SetURL(\"https://wails.app\")\nerr := app.Run()\nif err != nil {\nlog.Fatal(err.Error())\n}\n}\n</code></pre>"},{"location":"whats-new/#systrays","title":"Systrays","text":"<p>Systrays allow you to add an icon in the system tray area of your desktop and have the following features:</p> <ul> <li>Attach window (the window will be centered to the systray icon)</li> <li>Full menu support</li> <li>Light/Dark mode icons</li> </ul> <pre><code>package main\nimport (\n_ \"embed\"\n\"log\"\n\"runtime\"\n\"github.com/wailsapp/wails/v3/pkg/application\"\n\"github.com/wailsapp/wails/v3/pkg/icons\"\n)\nfunc main() {\napp := application.New(application.Options{\nName:        \"Systray Demo\",\nMac: application.MacOptions{\nActivationPolicy: application.ActivationPolicyAccessory,\n},\n})\nwindow := app.NewWebviewWindowWithOptions(application.WebviewWindowOptions{\nWidth:       500,\nHeight:      800,\nFrameless:   true,\nAlwaysOnTop: true,\nHidden:      true,\nWindows: application.WindowsWindow{\nHiddenOnTaskbar: true,\n},\n})\nsystemTray := app.NewSystemTray()\n// Support for template icons on macOS\nif runtime.GOOS == \"darwin\" {\nsystemTray.SetTemplateIcon(icons.SystrayMacTemplate)\n} else {\n// Support for light/dark mode icons\nsystemTray.SetDarkModeIcon(icons.SystrayDark)\nsystemTray.SetIcon(icons.SystrayLight)\n}\n// Support for menu\nmyMenu := app.NewMenu()\nmyMenu.Add(\"Hello World!\").OnClick(func(_ *application.Context) {\nprintln(\"Hello World!\")\n})\nsystemTray.SetMenu(myMenu)\n// This will center the window to the systray icon with a 5px offset\n// It will automatically be shown when the systray icon is clicked\n// and hidden when the window loses focus\nsystemTray.AttachWindow(window).WindowOffset(5)\nerr := app.Run()\nif err != nil {\nlog.Fatal(err)\n}\n}\n</code></pre>"},{"location":"whats-new/#plugins","title":"Plugins","text":"<p>Plugins allow you to extend the functionality of the Wails system. Not only can plugin methods be used in Go, but also called from Javascript. Included plugins:</p> <ul> <li>kvstore - A key/value store</li> <li>browser - open links in a browser</li> <li>log - custom logger</li> <li>oauth - handles oauth authentication and supports 60 providers</li> <li>single_instance - only allow one copy of your app to be run</li> <li>sqlite - add a sqlite db to your app. Uses the modernc pure go library</li> <li>start_at_login - Register/Unregister your application to start at login</li> </ul>"},{"location":"whats-new/#improved-bindings-generation","title":"Improved bindings generation","text":"<p>v3 uses a new static analyser to generate bindings. This makes it extremely fast and maintains comments and parameter names in your bindings. By default, bindings are generated with calls using IDs instead of strings. This provides a performance boost and allows for using obfuscation tools such as garble.</p> <p>Bindings are generated by simply running <code>wails3 generate bindings</code> in the project directory.</p> <pre><code>// @ts-check\n// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH \u00c2 MODIWL\n// This file is automatically generated. DO NOT EDIT\nimport { main } from \"./models\";\nwindow.go = window.go || {};\nwindow.go.main = {\nGreetService: {\n/**\n     * GreetService.Greet\n     * Greet greets a person\n     * @param name {string}\n     * @returns {Promise&lt;string&gt;}\n     **/\nGreet: function (name) {\nwails.CallByID(1411160069, ...Array.prototype.slice.call(arguments, 0));\n},\n/**\n     * GreetService.GreetPerson\n     * GreetPerson greets a person\n     * @param person {main.Person}\n     * @returns {Promise&lt;string&gt;}\n     **/\nGreetPerson: function (person) {\nwails.CallByID(4021313248, ...Array.prototype.slice.call(arguments, 0));\n},\n},\n};\n</code></pre>"},{"location":"whats-new/#improved-build-system","title":"Improved build system","text":"<p>In v2, the build system was completely opaque and hard to customise. In v3, it's possible to build everything using standard Go tooling.</p> <p>All the heavy lifting that the v2 build system did, such as icon generation, have been added as tool commands in the CLI. We have incorporated Taskfile into the CLI to orchestrate these calls to bring the same developer experience as v2. However, this approach brings the ultimate balance of flexibility and ease of use as you can now customise the build process to your needs.</p> <p>You can even use make if that's your thing!</p> Snippet from Taskfile.yml<pre><code>build:darwin:\nsummary: Builds the application\nplatforms:\n- darwin\ncmds:\n- task: pre-build\n- task: build-frontend\n- go build -gcflags=all=\"-N -l\" -o bin/{{.APP_NAME}}\n- task: post-build\nenv:\nCGO_CFLAGS: \"-mmacosx-version-min=10.13\"\nCGO_LDFLAGS: \"-mmacosx-version-min=10.13\"\nMACOSX_DEPLOYMENT_TARGET: \"10.13\"\n</code></pre>"},{"location":"whats-new/#improved-events","title":"Improved events","text":"<p>Events are now emitted for a lot of the runtime operations, allowing you to hook into application/system events. Cross-platform (common) events are also emitted where there are common platform events, allowing you to write the same event handling methods cross platform.</p> <p>Event hooks can also be registered. These are like the <code>On</code> method but are synchronous and allow you to cancel the event. An example of this would be to show a confirmation dialog before closing a window.</p> <pre><code>package main\nimport (\n_ \"embed\"\n\"log\"\n\"time\"\n\"github.com/wailsapp/wails/v3/pkg/application\"\n\"github.com/wailsapp/wails/v3/pkg/events\"\n)\n//go:embed assets\nvar assets embed.FS\nfunc main() {\napp := application.New(application.Options{\nName:        \"Events Demo\",\nDescription: \"A demo of the Events API\",\nAssets: application.AssetOptions{\nFS: assets,\n},\nMac: application.MacOptions{\nApplicationShouldTerminateAfterLastWindowClosed: true,\n},\n})\n// Custom event handling\napp.Events.On(\"myevent\", func(e *application.WailsEvent) {\nlog.Printf(\"[Go] WailsEvent received: %+v\\n\", e)\n})\n// OS specific application events\napp.On(events.Mac.ApplicationDidFinishLaunching, func(event *application.Event) {\nprintln(\"events.Mac.ApplicationDidFinishLaunching fired!\")\n})\n// Platform agnostic events\napp.On(events.Common.ApplicationStarted, func(event *application.Event) {\nprintln(\"events.Common.ApplicationStarted fired!\")\n})\nwin1 := app.NewWebviewWindowWithOptions(application.WebviewWindowOptions{\nTitle: \"Takes 3 attempts to close me!\",\n})\nvar countdown = 3\n// Register a hook to cancel the window closing\nwin1.RegisterHook(events.Common.WindowClosing, func(e *application.WindowEvent) {\ncountdown--\nif countdown == 0 {\nprintln(\"Closing!\")\nreturn\n}\nprintln(\"Nope! Not closing!\")\ne.Cancel()\n})\nwin1.On(events.Common.WindowFocus, func(e *application.WindowEvent) {\nprintln(\"[Event] Window focus!\")\n})\nerr := app.Run()\nif err != nil {\nlog.Fatal(err.Error())\n}\n}\n</code></pre>"},{"location":"whats-new/#wails-markup-language-wml","title":"Wails Markup Language (wml)","text":"<p>An experimental feature to call runtime methods using plain html, similar to htmx.</p> <pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\" /&gt;\n&lt;title&gt;Wails ML Demo&lt;/title&gt;\n&lt;/head&gt;\n&lt;body style=\"margin-top:50px; color: white; background-color: #191919\"&gt;\n&lt;h2&gt;Wails ML Demo&lt;/h2&gt;\n&lt;p&gt;This application contains no Javascript!&lt;/p&gt;\n&lt;button data-wml-event=\"button-pressed\"&gt;Press me!&lt;/button&gt;\n&lt;button data-wml-event=\"delete-things\" data-wml-confirm=\"Are you sure?\"&gt;\n      Delete all the things!\n    &lt;/button&gt;\n&lt;button data-wml-window=\"Close\" data-wml-confirm=\"Are you sure?\"&gt;\n      Close the Window?\n    &lt;/button&gt;\n&lt;button data-wml-window=\"Center\"&gt;Center&lt;/button&gt;\n&lt;button data-wml-window=\"Minimise\"&gt;Minimise&lt;/button&gt;\n&lt;button data-wml-window=\"Maximise\"&gt;Maximise&lt;/button&gt;\n&lt;button data-wml-window=\"UnMaximise\"&gt;UnMaximise&lt;/button&gt;\n&lt;button data-wml-window=\"Fullscreen\"&gt;Fullscreen&lt;/button&gt;\n&lt;button data-wml-window=\"UnFullscreen\"&gt;UnFullscreen&lt;/button&gt;\n&lt;button data-wml-window=\"Restore\"&gt;Restore&lt;/button&gt;\n&lt;div\nstyle=\"width: 200px; height: 200px; border: 2px solid white;\"\ndata-wml-event=\"hover\"\ndata-wml-trigger=\"mouseover\"\n&gt;\n      Hover over me\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"API/application/","title":"Application","text":"<p>The application API assists in creating an application using the Wails framework.</p>"},{"location":"API/application/#new","title":"New","text":"<p>API: <code>New(appOptions Options) *App</code></p> <p><code>New(appOptions Options)</code> creates a new application using the given application options . It applies default values for unspecified options, merges them with the provided ones, initializes and returns an instance of the application.</p> <p>In case of an error during initialization, the application is stopped with the error message provided.</p> <p>It should be noted that if a global application instance already exists, that instance will be returned instead of creating a new one.</p> main.go<pre><code>package main\nimport \"github.com/wailsapp/wails/v3/pkg/application\"\nfunc main() {\napp := application.New(application.Options{\nName:        \"WebviewWindow Demo\",\n// Other options\n})\n// Rest of application\n}\n</code></pre>"},{"location":"API/application/#get","title":"Get","text":"<p><code>Get()</code> returns the global application instance. It's useful when you need to access the application from different parts of your code.</p> <pre><code>    // Get the application instance\napp := application.Get()\n</code></pre>"},{"location":"API/application/#capabilities","title":"Capabilities","text":"<p>API: <code>Capabilities() capabilities.Capabilities</code></p> <p><code>Capabilities()</code> retrieves a map of capabilities that the application currently has. Capabilities can be about different features the operating system provides, like webview features.</p> <pre><code>    // Get the application capabilities\ncapabilities := app.Capabilities()\nif capabilities.HasNativeDrag {\n// Do something\n}\n</code></pre>"},{"location":"API/application/#getpid","title":"GetPID","text":"<p>API: <code>GetPID() int</code></p> <p><code>GetPID()</code> returns the Process ID of the application.</p> <pre><code>    pid := app.GetPID()\n</code></pre>"},{"location":"API/application/#run","title":"Run","text":"<p>API: <code>Run() error</code></p> <p><code>Run()</code> starts the execution of the application and its components.</p> <pre><code>    app := application.New(application.Options{\n//options\n})\n// Run the application\nerr := application.Run()\nif err != nil {\n// Handle error\n}\n</code></pre>"},{"location":"API/application/#quit","title":"Quit","text":"<p>API: <code>Quit()</code></p> <p><code>Quit()</code> quits the application by destroying windows and potentially other components.</p> <pre><code>    // Quit the application\napp.Quit()\n</code></pre>"},{"location":"API/application/#isdarkmode","title":"IsDarkMode","text":"<p>API: <code>IsDarkMode() bool</code></p> <p><code>IsDarkMode()</code> checks if the application is running in dark mode. It returns a boolean indicating whether dark mode is enabled.</p> <pre><code>    // Check if dark mode is enabled\nif app.IsDarkMode() {\n// Do something\n}\n</code></pre>"},{"location":"API/application/#hide","title":"Hide","text":"<p>API: <code>Hide()</code></p> <p><code>Hide()</code> hides the application window.</p> <pre><code>    // Hide the application window\napp.Hide()\n</code></pre>"},{"location":"API/application/#show","title":"Show","text":"<p>API: <code>Show()</code></p> <p><code>Show()</code> shows the application window.</p> <pre><code>    // Show the application window\napp.Show()\n</code></pre>"},{"location":"API/application/#newwebviewwindow","title":"NewWebviewWindow","text":"<p>API: <code>NewWebviewWindow() *WebviewWindow</code></p> <p><code>NewWebviewWindow()</code> creates a new Webview window with default options, and returns it.</p> <pre><code>    // Create a new webview window\nwindow := app.NewWebviewWindow()\n</code></pre>"},{"location":"API/application/#newwebviewwindowwithoptions","title":"NewWebviewWindowWithOptions","text":"<p>API: <code>NewWebviewWindowWithOptions(windowOptions WebviewWindowOptions) *WebviewWindow</code></p> <p><code>NewWebviewWindowWithOptions()</code> creates a new webview window with custom options. The newly created window is added to a map of windows managed by the application.</p> <pre><code>    // Create a new webview window with custom options\nwindow := app.NewWebviewWindowWithOptions(WebviewWindowOptions{\nName: \"Main\",\nTitle: \"My Window\",\nWidth: 800,\nHeight: 600,\n})\n</code></pre>"},{"location":"API/application/#onwindowcreation","title":"OnWindowCreation","text":"<p>API: <code>OnWindowCreation(callback func(window *WebviewWindow))</code></p> <p><code>OnWindowCreation()</code> registers a callback function to be called when a window is created.</p> <pre><code>    // Register a callback to be called when a window is created\napp.OnWindowCreation(func(window *WebviewWindow) {\n// Do something\n})\n</code></pre>"},{"location":"API/application/#getwindowbyname","title":"GetWindowByName","text":"<p>API: <code>GetWindowByName(name string) *WebviewWindow</code></p> <p><code>GetWindowByName()</code> fetches and returns a window with a specific name.</p> <pre><code>    // Get a window by name\nwindow := app.GetWindowByName(\"Main\")\n</code></pre>"},{"location":"API/application/#currentwindow","title":"CurrentWindow","text":"<p>API: <code>CurrentWindow() *WebviewWindow</code></p> <p><code>CurrentWindow()</code> fetches and returns a pointer to the currently active window in the application. If there is no window, it returns nil.</p> <pre><code>    // Get the current window\nwindow := app.CurrentWindow()\n</code></pre>"},{"location":"API/application/#registercontextmenu","title":"RegisterContextMenu","text":"<p>API: <code>RegisterContextMenu(name string, menu *Menu)</code></p> <p><code>RegisterContextMenu()</code> registers a context menu with a given name. This menu can be used later in the application.</p> <pre><code>    // Create a new menu\nctxmenu := app.NewMenu()\n// Register the menu as a context menu\napp.RegisterContextMenu(\"MyContextMenu\", ctxmenu)\n</code></pre>"},{"location":"API/application/#setmenu","title":"SetMenu","text":"<p>API: <code>SetMenu(menu *Menu)</code></p> <p><code>SetMenu()</code> sets the menu for the application. On Mac, this will be the global menu. For Windows and Linux, this will be the default menu for any new window created.</p> <pre><code>    // Create a new menu\nmenu := app.NewMenu()\n// Set the menu for the application\napp.SetMenu(menu)\n</code></pre>"},{"location":"API/application/#showaboutdialog","title":"ShowAboutDialog","text":"<p>API: <code>ShowAboutDialog()</code></p> <p><code>ShowAboutDialog()</code> shows an \"About\" dialog box. It can show the application's name, description and icon.</p> <pre><code>    // Show the about dialog\napp.ShowAboutDialog()\n</code></pre>"},{"location":"API/application/#info","title":"Info","text":"<p>API: <code>InfoDialog()</code></p> <p><code>InfoDialog()</code> creates and returns a new instance of <code>MessageDialog</code> with an <code>InfoDialogType</code>. This dialog is typically used to display informational messages to the user.</p>"},{"location":"API/application/#question","title":"Question","text":"<p>API: <code>QuestionDialog()</code></p> <p><code>QuestionDialog()</code> creates and returns a new instance of <code>MessageDialog</code> with a <code>QuestionDialogType</code>. This dialog is often used to ask a question to the user and expect a response.</p>"},{"location":"API/application/#warning","title":"Warning","text":"<p>API: <code>WarningDialog()</code></p> <p><code>WarningDialog()</code> creates and returns a new instance of <code>MessageDialog</code> with a <code>WarningDialogType</code>. As the name suggests, this dialog is primarily used to display warning messages to the user.</p>"},{"location":"API/application/#error","title":"Error","text":"<p>API: <code>ErrorDialog()</code></p> <p><code>ErrorDialog()</code> creates and returns a new instance of <code>MessageDialog</code> with an <code>ErrorDialogType</code>. This dialog is designed to be used when you need to display an error message to the user.</p>"},{"location":"API/application/#openfile","title":"OpenFile","text":"<p>API: <code>OpenFileDialog()</code></p> <p><code>OpenFileDialog()</code> creates and returns a new <code>OpenFileDialogStruct</code>. This dialog prompts the user to select one or more files from their file system.</p>"},{"location":"API/application/#savefile","title":"SaveFile","text":"<p>API: <code>SaveFileDialog()</code></p> <p><code>SaveFileDialog()</code> creates and returns a new <code>SaveFileDialogStruct</code>. This dialog prompts the user to choose a location on their file system where a file should be saved.</p>"},{"location":"API/application/#opendirectory","title":"OpenDirectory","text":"<p>API: <code>OpenDirectoryDialog()</code></p> <p><code>OpenDirectoryDialog()</code> creates and returns a new instance of <code>MessageDialog</code> with an <code>OpenDirectoryDialogType</code>. This dialog enables the user to choose a directory from their file system.</p>"},{"location":"API/application/#on","title":"On","text":"<p>API: <code>On(eventType events.ApplicationEventType, callback func(event *Event)) func()</code></p> <p><code>On()</code> registers an event listener for specific application events. The callback function provided will be triggered when the corresponding event occurs. The function returns a function that can be called to remove the listener.</p>"},{"location":"API/application/#registerhook","title":"RegisterHook","text":"<p>API: <code>RegisterHook(eventType events.ApplicationEventType, callback func(event *Event)) func()</code></p> <p><code>RegisterHook()</code> registers a callback to be run as a hook during specific events. These hooks are run before listeners attached with <code>On()</code>. The function returns a function that can be called to remove the hook.</p>"},{"location":"API/application/#getprimaryscreen","title":"GetPrimaryScreen","text":"<p>API: <code>GetPrimaryScreen() (*Screen, error)</code></p> <p><code>GetPrimaryScreen()</code> returns the primary screen of the system.</p>"},{"location":"API/application/#getscreens","title":"GetScreens","text":"<p>API: <code>GetScreens() ([]*Screen, error)</code></p> <p><code>GetScreens()</code> returns information about all screens attached to the system.</p> <p>This is a brief summary of the exported methods in the provided <code>App</code> struct. Do note that for more detailed functionality or considerations, refer to the actual Go code or further internal documentation.</p>"},{"location":"API/application/#options","title":"Options","text":"application_options.go<pre><code>package application\nimport (\n\"io/fs\"\n\"log/slog\"\n\"net/http\"\n)\ntype Options struct {\n// Name is the name of the application\nName string\n// Description is the description of the application (used in the default about box)\nDescription string\n// Icon is the icon of the application (used in the default about box)\nIcon []byte\n// Mac is the Mac specific configuration for Mac builds\nMac MacOptions\n// Windows is the Windows specific configuration for Windows builds\nWindows WindowsOptions\n// Bind allows you to bind Go methods to the frontend.\nBind []any\n// BindAliases allows you to specify alias IDs for your bound methods.\n// Example: `BindAliases: map[uint32]uint32{1: 1411160069}` states that alias ID 1 maps to the Go method with ID 1411160069.\nBindAliases map[uint32]uint32\n// Logger i a slog.Logger instance used for logging Wails system messages (not application messages).\n// If not defined, a default logger is used.\nLogger *slog.Logger\n// LogLevel defines the log level of the Wails system logger.\nLogLevel slog.Level\n// Assets are the application assets to be used.\nAssets AssetOptions\n// Plugins is a map of plugins used by the application\nPlugins map[string]Plugin\n// Flags are key value pairs that are available to the frontend.\n// This is also used by Wails to provide information to the frontend.\nFlags map[string]any\n// PanicHandler is a way to register a custom panic handler\nPanicHandler func(any)\n// KeyBindings is a map of key bindings to functions\nKeyBindings map[string]func(window *WebviewWindow)\n}\n// AssetOptions defines the configuration of the AssetServer.\ntype AssetOptions struct {\n// FS defines the static assets to be used. A GET request is first tried to be served from this FS. If the FS returns\n// `os.ErrNotExist` for that file, the request handling will fallback to the Handler and tries to serve the GET\n// request from it.\n//\n// If set to nil, all GET requests will be forwarded to Handler.\nFS fs.FS\n// Handler will be called for every GET request that can't be served from FS, due to `os.ErrNotExist`. Furthermore all\n// non GET requests will always be served from this Handler.\n//\n// If not defined, the result is the following in cases where the Handler would have been called:\n//   GET request:   `http.StatusNotFound`\n//   Other request: `http.StatusMethodNotAllowed`\nHandler http.Handler\n// Middleware is HTTP Middleware which allows to hook into the AssetServer request chain. It allows to skip the default\n// request handler dynamically, e.g. implement specialized Routing etc.\n// The Middleware is called to build a new `http.Handler` used by the AssetSever and it also receives the default\n// handler used by the AssetServer as an argument.\n//\n// If not defined, the default AssetServer request chain is executed.\n//\n// Multiple Middlewares can be chained together with:\n//   ChainMiddleware(middleware ...Middleware) Middleware\nMiddleware Middleware\n// External URL can be set to a development server URL so that all requests are forwarded to it. This is useful\n// when using a development server like `vite` or `snowpack` which serves the assets on a different port.\nExternalURL string\n}\n// Middleware defines HTTP middleware that can be applied to the AssetServer.\n// The handler passed as next is the next handler in the chain. One can decide to call the next handler\n// or implement a specialized handling.\ntype Middleware func(next http.Handler) http.Handler\n// ChainMiddleware allows chaining multiple middlewares to one middleware.\nfunc ChainMiddleware(middleware ...Middleware) Middleware {\nreturn func(h http.Handler) http.Handler {\nfor i := len(middleware) - 1; i &gt;= 0; i-- {\nh = middleware[i](h)\n}\nreturn h\n}\n}\n</code></pre>"},{"location":"API/application/#windows-options","title":"Windows Options","text":"application_options_windows.go<pre><code>package application\n// WindowsOptions contains options for Windows applications.\ntype WindowsOptions struct {\n// WndProcInterceptor is a function that will be called for every message sent in the application.\n// Use this to hook into the main message loop. This is useful for handling custom window messages.\n// If `shouldReturn` is `true` then `returnCode` will be returned by the main message loop.\n// If `shouldReturn` is `false` then returnCode will be ignored and the message will be processed by the main message loop.\nWndProcInterceptor func(hwnd uintptr, msg uint32, wParam, lParam uintptr) (returnCode uintptr, shouldReturn bool)\n// DisableQuitOnLastWindowClosed disables the auto quit of the application if the last window has been closed.\nDisableQuitOnLastWindowClosed bool\n// Path where the WebView2 stores the user data. If empty %APPDATA%\\[BinaryName.exe] will be used.\n// If the path is not valid, a messagebox will be displayed with the error and the app will exit with error code.\nWebviewUserDataPath string\n// Path to the directory with WebView2 executables. If empty WebView2 installed in the system will be used.\nWebviewBrowserPath string\n}\n</code></pre>"},{"location":"API/application/#mac-options","title":"Mac Options","text":"options_application_mac.go<pre><code>package application\n// ActivationPolicy is the activation policy for the application.\ntype ActivationPolicy int\nconst (\n// ActivationPolicyRegular is used for applications that have a user interface,\nActivationPolicyRegular ActivationPolicy = iota\n// ActivationPolicyAccessory is used for applications that do not have a main window,\n// such as system tray applications or background applications.\nActivationPolicyAccessory\nActivationPolicyProhibited\n)\n// MacOptions contains options for macOS applications.\ntype MacOptions struct {\n// ActivationPolicy is the activation policy for the application. Defaults to\n// applicationActivationPolicyRegular.\nActivationPolicy ActivationPolicy\n// If set to true, the application will terminate when the last window is closed.\nApplicationShouldTerminateAfterLastWindowClosed bool\n}\n</code></pre>"},{"location":"API/fullapi/","title":"application","text":"<pre><code>import \"github.com/wailsapp/wails/v3/pkg/application\"\n</code></pre>"},{"location":"API/fullapi/#index","title":"Index","text":"<ul> <li>Constants</li> <li>Variables</li> <li>func DefaultLogger(level slog.Level) *slog.Logger</li> <li>func Fatal(message string, args ...interface{})</li> <li>func InvokeAsync(fn func())</li> <li>func InvokeSync(fn func())</li> <li>func InvokeSyncWithError(fn func() error) (err error)</li> <li>func InvokeSyncWithResult[T any](fn func() T) (res T)</li> <li>func InvokeSyncWithResultAndError[T any](fn func() (T, error)) (res T, err error)</li> <li>func NewIconFromResource(instance w32.HINSTANCE, resId uint16) (w32.HICON, error)</li> <li>func ScaleToDefaultDPI(pixels int, dpi uint) int</li> <li>func ScaleWithDPI(pixels int, dpi uint) int</li> <li>type ActivationPolicy</li> <li>type App</li> <li>func Get() *App</li> <li>func New(appOptions Options) *App</li> <li>func (a *App) Capabilities() capabilities.Capabilities</li> <li>func (a *App) Clipboard() *Clipboard</li> <li>func (a *App) CurrentWindow() *WebviewWindow</li> <li>func (a *App) GetPID() int</li> <li>func (a *App) GetPrimaryScreen() (*Screen, error)</li> <li>func (a *App) GetScreens() ([]*Screen, error)</li> <li>func (a *App) GetWindowByName(name string) *WebviewWindow</li> <li>func (a *App) Hide()</li> <li>func (a *App) IsDarkMode() bool</li> <li>func (a *App) NewMenu() *Menu</li> <li>func (a *App) NewSystemTray() *SystemTray</li> <li>func (a *App) NewWebviewWindow() *WebviewWindow</li> <li>func (a *App) NewWebviewWindowWithOptions(windowOptions WebviewWindowOptions) *WebviewWindow</li> <li>func (a *App) On(eventType events.ApplicationEventType, callback func(event *Event)) func()</li> <li>func (a *App) OnWindowCreation(callback func(window *WebviewWindow))</li> <li>func (a *App) Quit()</li> <li>func (a *App) RegisterContextMenu(name string, menu *Menu)</li> <li>func (a *App) RegisterHook(eventType events.ApplicationEventType, callback func(event *Event)) func()</li> <li>func (a *App) Run() error</li> <li>func (a *App) SetMenu(menu *Menu)</li> <li>func (a *App) Show()</li> <li>func (a *App) ShowAboutDialog()</li> <li>type ApplicationEventContext</li> <li>func (c ApplicationEventContext) IsDarkMode() bool</li> <li>func (c ApplicationEventContext) OpenedFiles() []string</li> <li>type Args</li> <li>func (a *Args) Bool(s string) *bool</li> <li>func (a *Args) Float64(s string) *float64</li> <li>func (a *Args) Int(s string) *int</li> <li>func (a *Args) String(key string) *string</li> <li>func (a *Args) UInt(s string) *uint</li> <li>func (a *Args) UInt8(s string) *uint8</li> <li>type AssetOptions</li> <li>type BackdropType</li> <li>type BackgroundType</li> <li>type Bindings</li> <li>func NewBindings(structs []any, aliases map[uint32]uint32) (*Bindings, error)</li> <li>func (b *Bindings) Add(structPtr interface{}) error</li> <li>func (b *Bindings) AddPlugins(plugins map[string]Plugin) error</li> <li>func (b *Bindings) GenerateID(name string) (uint32, error)</li> <li>func (b *Bindings) Get(options *CallOptions) *BoundMethod</li> <li>func (b *Bindings) GetByID(id uint32) *BoundMethod</li> <li>type BoundMethod</li> <li>func (b *BoundMethod) Call(args []interface{}) (returnValue interface{}, err error)</li> <li>func (b *BoundMethod) String() string</li> <li>type Button</li> <li>func (b *Button) OnClick(callback func()) *Button</li> <li>func (b *Button) SetAsCancel() *Button</li> <li>func (b *Button) SetAsDefault() *Button</li> <li>type CallOptions</li> <li>func (c CallOptions) Name() string</li> <li>type Clipboard</li> <li>func (c *Clipboard) SetText(text string) bool</li> <li>func (c *Clipboard) Text() (string, bool)</li> <li>type Context</li> <li>func (c *Context) ClickedMenuItem() *MenuItem</li> <li>func (c *Context) ContextMenuData() any</li> <li>func (c *Context) IsChecked() bool</li> <li>type ContextMenuData</li> <li>type DialogType</li> <li>type Event</li> <li>func (w *Event) Cancel()</li> <li>func (w *Event) Context() *ApplicationEventContext</li> <li>type EventListener</li> <li>type EventProcessor</li> <li>func NewWailsEventProcessor(dispatchEventToWindows func(*WailsEvent)) *EventProcessor</li> <li>func (e *EventProcessor) Emit(thisEvent *WailsEvent)</li> <li>func (e *EventProcessor) Off(eventName string)</li> <li>func (e *EventProcessor) OffAll()</li> <li>func (e *EventProcessor) On(eventName string, callback func(event *WailsEvent)) func()</li> <li>func (e *EventProcessor) OnMultiple(eventName string, callback func(event *WailsEvent), counter int) func()</li> <li>func (e *EventProcessor) Once(eventName string, callback func(event *WailsEvent)) func()</li> <li>func (e *EventProcessor) RegisterHook(eventName string, callback func(*WailsEvent)) func()</li> <li>type FileFilter</li> <li>type IconPosition</li> <li>type MacAppearanceType</li> <li>type MacBackdrop</li> <li>type MacOptions</li> <li>type MacTitleBar</li> <li>type MacToolbarStyle</li> <li>type MacWindow</li> <li>type Menu</li> <li>func NewMenu() *Menu</li> <li>func (m *Menu) Add(label string) *MenuItem</li> <li>func (m *Menu) AddCheckbox(label string, enabled bool) *MenuItem</li> <li>func (m *Menu) AddRadio(label string, enabled bool) *MenuItem</li> <li>func (m *Menu) AddRole(role Role) *Menu</li> <li>func (m *Menu) AddSeparator()</li> <li>func (m *Menu) AddSubmenu(s string) *Menu</li> <li>func (m *Menu) SetLabel(label string)</li> <li>func (m *Menu) Update()</li> <li>type MenuItem</li> <li>func (m *MenuItem) Checked() bool</li> <li>func (m *MenuItem) Enabled() bool</li> <li>func (m *MenuItem) Hidden() bool</li> <li>func (m *MenuItem) IsCheckbox() bool</li> <li>func (m *MenuItem) IsRadio() bool</li> <li>func (m *MenuItem) IsSeparator() bool</li> <li>func (m *MenuItem) IsSubmenu() bool</li> <li>func (m *MenuItem) Label() string</li> <li>func (m *MenuItem) OnClick(f func(*Context)) *MenuItem</li> <li>func (m *MenuItem) SetAccelerator(shortcut string) *MenuItem</li> <li>func (m *MenuItem) SetChecked(checked bool) *MenuItem</li> <li>func (m *MenuItem) SetEnabled(enabled bool) *MenuItem</li> <li>func (m *MenuItem) SetHidden(hidden bool) *MenuItem</li> <li>func (m *MenuItem) SetLabel(s string) *MenuItem</li> <li>func (m *MenuItem) SetTooltip(s string) *MenuItem</li> <li>func (m *MenuItem) Tooltip() string</li> <li>type MessageDialog</li> <li>func ErrorDialog() *MessageDialog</li> <li>func InfoDialog() *MessageDialog</li> <li>func OpenDirectoryDialog() *MessageDialog</li> <li>func QuestionDialog() *MessageDialog</li> <li>func WarningDialog() *MessageDialog</li> <li>func (d *MessageDialog) AddButton(s string) *Button</li> <li>func (d *MessageDialog) AddButtons(buttons []*Button) *MessageDialog</li> <li>func (d *MessageDialog) AttachToWindow(window *WebviewWindow) *MessageDialog</li> <li>func (d *MessageDialog) SetCancelButton(button *Button) *MessageDialog</li> <li>func (d *MessageDialog) SetDefaultButton(button *Button) *MessageDialog</li> <li>func (d *MessageDialog) SetIcon(icon []byte) *MessageDialog</li> <li>func (d *MessageDialog) SetMessage(message string) *MessageDialog</li> <li>func (d *MessageDialog) SetTitle(title string) *MessageDialog</li> <li>func (d *MessageDialog) Show()</li> <li>type MessageDialogOptions</li> <li>type MessageProcessor</li> <li>func NewMessageProcessor(logger *slog.Logger) *MessageProcessor</li> <li>func (m *MessageProcessor) Error(message string, args ...any)</li> <li>func (m *MessageProcessor) HandleRuntimeCall(rw http.ResponseWriter, r *http.Request)</li> <li>func (m *MessageProcessor) HandleRuntimeCallWithIDs(rw http.ResponseWriter, r *http.Request)</li> <li>func (m *MessageProcessor) Info(message string, args ...any)</li> <li>type Middleware</li> <li>func ChainMiddleware(middleware ...Middleware) Middleware</li> <li>type OpenFileDialogOptions</li> <li>type OpenFileDialogStruct</li> <li>func OpenFileDialog() *OpenFileDialogStruct</li> <li>func OpenFileDialogWithOptions(options *OpenFileDialogOptions) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) AddFilter(displayName, pattern string) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) AllowsOtherFileTypes(allowsOtherFileTypes bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) AttachToWindow(window *WebviewWindow) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) CanChooseDirectories(canChooseDirectories bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) CanChooseFiles(canChooseFiles bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) CanCreateDirectories(canCreateDirectories bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) CanSelectHiddenExtension(canSelectHiddenExtension bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) HideExtension(hideExtension bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) PromptForMultipleSelection() ([]string, error)</li> <li>func (d *OpenFileDialogStruct) PromptForSingleSelection() (string, error)</li> <li>func (d *OpenFileDialogStruct) ResolvesAliases(resolvesAliases bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) SetButtonText(text string) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) SetDirectory(directory string) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) SetMessage(message string) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) SetOptions(options *OpenFileDialogOptions)</li> <li>func (d *OpenFileDialogStruct) SetTitle(title string) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) ShowHiddenFiles(showHiddenFiles bool) *OpenFileDialogStruct</li> <li>func (d *OpenFileDialogStruct) TreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories bool) *OpenFileDialogStruct</li> <li>type Options</li> <li>type Parameter</li> <li>func (p *Parameter) IsError() bool</li> <li>func (p *Parameter) IsType(typename string) bool</li> <li>type Plugin</li> <li>type PluginCallOptions</li> <li>type PluginManager</li> <li>func NewPluginManager(plugins map[string]Plugin, assetServer *assetserver.AssetServer) *PluginManager</li> <li>func (p *PluginManager) Init() error</li> <li>func (p *PluginManager) Shutdown()</li> <li>type PositionOptions</li> <li>type QueryParams</li> <li>func (qp QueryParams) Args() (*Args, error)</li> <li>func (qp QueryParams) Bool(key string) *bool</li> <li>func (qp QueryParams) Float64(key string) *float64</li> <li>func (qp QueryParams) Int(key string) *int</li> <li>func (qp QueryParams) String(key string) *string</li> <li>func (qp QueryParams) ToStruct(str any) error</li> <li>func (qp QueryParams) UInt(key string) *uint</li> <li>func (qp QueryParams) UInt8(key string) *uint8</li> <li>type RGBA</li> <li>type RadioGroup</li> <li>func (r *RadioGroup) Add(id int, item *MenuItem)</li> <li>func (r *RadioGroup) Bounds() (int, int)</li> <li>func (r *RadioGroup) MenuID(item *MenuItem) int</li> <li>type RadioGroupMember</li> <li>type Rect</li> <li>type Role</li> <li>type SaveFileDialogOptions</li> <li>type SaveFileDialogStruct</li> <li>func SaveFileDialog() *SaveFileDialogStruct</li> <li>func SaveFileDialogWithOptions(s *SaveFileDialogOptions) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) AddFilter(displayName, pattern string) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) AllowsOtherFileTypes(allowOtherFileTypes bool) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) AttachToWindow(window *WebviewWindow) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) CanCreateDirectories(canCreateDirectories bool) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) CanSelectHiddenExtension(canSelectHiddenExtension bool) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) HideExtension(hideExtension bool) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) PromptForSingleSelection() (string, error)</li> <li>func (d *SaveFileDialogStruct) SetButtonText(text string) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) SetDirectory(directory string) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) SetFilename(filename string) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) SetMessage(message string) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) SetOptions(options *SaveFileDialogOptions)</li> <li>func (d *SaveFileDialogStruct) ShowHiddenFiles(showHiddenFiles bool) *SaveFileDialogStruct</li> <li>func (d *SaveFileDialogStruct) TreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories bool) *SaveFileDialogStruct</li> <li>type Screen</li> <li>type Size</li> <li>type SystemTray</li> <li>func (s *SystemTray) AttachWindow(window *WebviewWindow) *SystemTray</li> <li>func (s *SystemTray) Destroy()</li> <li>func (s *SystemTray) Label() string</li> <li>func (s *SystemTray) OnClick(handler func()) *SystemTray</li> <li>func (s *SystemTray) OnDoubleClick(handler func()) *SystemTray</li> <li>func (s *SystemTray) OnMouseEnter(handler func()) *SystemTray</li> <li>func (s *SystemTray) OnMouseLeave(handler func()) *SystemTray</li> <li>func (s *SystemTray) OnRightClick(handler func()) *SystemTray</li> <li>func (s *SystemTray) OnRightDoubleClick(handler func()) *SystemTray</li> <li>func (s *SystemTray) OpenMenu()</li> <li>func (s *SystemTray) PositionWindow(window *WebviewWindow, offset int) error</li> <li>func (s *SystemTray) SetDarkModeIcon(icon []byte) *SystemTray</li> <li>func (s *SystemTray) SetIcon(icon []byte) *SystemTray</li> <li>func (s *SystemTray) SetIconPosition(iconPosition int) *SystemTray</li> <li>func (s *SystemTray) SetLabel(label string)</li> <li>func (s *SystemTray) SetMenu(menu *Menu) *SystemTray</li> <li>func (s *SystemTray) SetTemplateIcon(icon []byte) *SystemTray</li> <li>func (s *SystemTray) WindowDebounce(debounce time.Duration) *SystemTray</li> <li>func (s *SystemTray) WindowOffset(offset int) *SystemTray</li> <li>type Theme</li> <li>type ThemeSettings</li> <li>type WailsEvent</li> <li>func (e *WailsEvent) Cancel()</li> <li>type WebviewWindow</li> <li>func (w *WebviewWindow) AbsolutePosition() (int, int)</li> <li>func (w *WebviewWindow) Center()</li> <li>func (w *WebviewWindow) Close()</li> <li>func (w *WebviewWindow) Destroy()</li> <li>func (w *WebviewWindow) ExecJS(js string)</li> <li>func (w *WebviewWindow) Flash(enabled bool)</li> <li>func (w *WebviewWindow) Focus()</li> <li>func (w *WebviewWindow) ForceReload()</li> <li>func (w *WebviewWindow) Fullscreen() *WebviewWindow</li> <li>func (w *WebviewWindow) GetScreen() (*Screen, error)</li> <li>func (w *WebviewWindow) GetZoom() float64</li> <li>func (w *WebviewWindow) Height() int</li> <li>func (w *WebviewWindow) Hide() *WebviewWindow</li> <li>func (w *WebviewWindow) IsFocused() bool</li> <li>func (w *WebviewWindow) IsFullscreen() bool</li> <li>func (w *WebviewWindow) IsMaximised() bool</li> <li>func (w *WebviewWindow) IsMinimised() bool</li> <li>func (w *WebviewWindow) IsVisible() bool</li> <li>func (w *WebviewWindow) Maximise() *WebviewWindow</li> <li>func (w *WebviewWindow) Minimise() *WebviewWindow</li> <li>func (w *WebviewWindow) Name() string</li> <li>func (w *WebviewWindow) NativeWindowHandle() (uintptr, error)</li> <li>func (w *WebviewWindow) On(eventType events.WindowEventType, callback func(event *WindowEvent)) func()</li> <li>func (w *WebviewWindow) Print() error</li> <li>func (w *WebviewWindow) RegisterContextMenu(name string, menu *Menu)</li> <li>func (w *WebviewWindow) RegisterHook(eventType events.WindowEventType, callback func(event *WindowEvent)) func()</li> <li>func (w *WebviewWindow) RelativePosition() (int, int)</li> <li>func (w *WebviewWindow) Reload()</li> <li>func (w *WebviewWindow) Resizable() bool</li> <li>func (w *WebviewWindow) Restore()</li> <li>func (w *WebviewWindow) SetAbsolutePosition(x int, y int)</li> <li>func (w *WebviewWindow) SetAlwaysOnTop(b bool) *WebviewWindow</li> <li>func (w *WebviewWindow) SetBackgroundColour(colour RGBA) *WebviewWindow</li> <li>func (w *WebviewWindow) SetEnabled(enabled bool)</li> <li>func (w *WebviewWindow) SetFrameless(frameless bool) *WebviewWindow</li> <li>func (w *WebviewWindow) SetFullscreenButtonEnabled(enabled bool) *WebviewWindow</li> <li>func (w *WebviewWindow) SetHTML(html string) *WebviewWindow</li> <li>func (w *WebviewWindow) SetMaxSize(maxWidth, maxHeight int) *WebviewWindow</li> <li>func (w *WebviewWindow) SetMinSize(minWidth, minHeight int) *WebviewWindow</li> <li>func (w *WebviewWindow) SetRelativePosition(x, y int) *WebviewWindow</li> <li>func (w *WebviewWindow) SetResizable(b bool) *WebviewWindow</li> <li>func (w *WebviewWindow) SetSize(width, height int) *WebviewWindow</li> <li>func (w *WebviewWindow) SetTitle(title string) *WebviewWindow</li> <li>func (w *WebviewWindow) SetURL(s string) *WebviewWindow</li> <li>func (w *WebviewWindow) SetZoom(magnification float64) *WebviewWindow</li> <li>func (w *WebviewWindow) Show() *WebviewWindow</li> <li>func (w *WebviewWindow) Size() (int, int)</li> <li>func (w *WebviewWindow) ToggleDevTools()</li> <li>func (w *WebviewWindow) ToggleFullscreen()</li> <li>func (w *WebviewWindow) UnFullscreen()</li> <li>func (w *WebviewWindow) UnMaximise()</li> <li>func (w *WebviewWindow) UnMinimise()</li> <li>func (w *WebviewWindow) Width() int</li> <li>func (w *WebviewWindow) Zoom()</li> <li>func (w *WebviewWindow) ZoomIn()</li> <li>func (w *WebviewWindow) ZoomOut()</li> <li>func (w *WebviewWindow) ZoomReset() *WebviewWindow</li> <li>type WebviewWindowOptions</li> <li>type Win32Menu</li> <li>func NewApplicationMenu(parent w32.HWND, inputMenu *Menu) *Win32Menu</li> <li>func NewPopupMenu(parent w32.HWND, inputMenu *Menu) *Win32Menu</li> <li>func (p *Win32Menu) Destroy()</li> <li>func (p *Win32Menu) OnMenuClose(fn func())</li> <li>func (p *Win32Menu) OnMenuOpen(fn func())</li> <li>func (p *Win32Menu) ProcessCommand(cmdMsgID int) bool</li> <li>func (p *Win32Menu) ShowAt(x int, y int)</li> <li>func (p *Win32Menu) ShowAtCursor()</li> <li>func (p *Win32Menu) Update()</li> <li>func (p *Win32Menu) UpdateMenuItem(item *MenuItem)</li> <li>type WindowAttachConfig</li> <li>type WindowEvent</li> <li>func NewWindowEvent() *WindowEvent</li> <li>func (w *WindowEvent) Cancel()</li> <li>func (w *WindowEvent) Context() *WindowEventContext</li> <li>type WindowEventContext</li> <li>func (c WindowEventContext) DroppedFiles() []string</li> <li>type WindowEventListener</li> <li>type WindowState</li> <li>type WindowsOptions</li> <li>type WindowsWindow</li> </ul>"},{"location":"API/fullapi/#constants","title":"Constants","text":"<pre><code>const (\nApplicationHide = 0\nApplicationShow = 1\nApplicationQuit = 2\n)\n</code></pre> <pre><code>const (\nClipboardSetText = 0\nClipboardText    = 1\n)\n</code></pre> <pre><code>const (\nDialogInfo     = 0\nDialogWarning  = 1\nDialogError    = 2\nDialogQuestion = 3\nDialogOpenFile = 4\nDialogSaveFile = 5\n)\n</code></pre> <pre><code>const (\nScreensGetAll     = 0\nScreensGetPrimary = 1\nScreensGetCurrent = 2\n)\n</code></pre> <pre><code>const (\nWindowCenter              = 0\nWindowSetTitle            = 1\nWindowFullscreen          = 2\nWindowUnFullscreen        = 3\nWindowSetSize             = 4\nWindowSize                = 5\nWindowSetMaxSize          = 6\nWindowSetMinSize          = 7\nWindowSetAlwaysOnTop      = 8\nWindowSetRelativePosition = 9\nWindowRelativePosition    = 10\nWindowScreen              = 11\nWindowHide                = 12\nWindowMaximise            = 13\nWindowUnMaximise          = 14\nWindowToggleMaximise      = 15\nWindowMinimise            = 16\nWindowUnMinimise          = 17\nWindowRestore             = 18\nWindowShow                = 19\nWindowClose               = 20\nWindowSetBackgroundColour = 21\nWindowSetResizable        = 22\nWindowWidth               = 23\nWindowHeight              = 24\nWindowZoomIn              = 25\nWindowZoomOut             = 26\nWindowZoomReset           = 27\nWindowGetZoomLevel        = 28\nWindowSetZoomLevel        = 29\n)\n</code></pre> <pre><code>const (\nNSImageNone = iota\nNSImageOnly\nNSImageLeft\nNSImageRight\nNSImageBelow\nNSImageAbove\nNSImageOverlaps\nNSImageLeading\nNSImageTrailing\n)\n</code></pre> <pre><code>const (\nCallBinding = 0\n)\n</code></pre> <pre><code>const (\nContextMenuOpen = 0\n)\n</code></pre> <pre><code>const (\nEventsEmit = 0\n)\n</code></pre> <pre><code>const (\nMenuItemMsgID = w32.WM_APP + 1024\n)\n</code></pre> <pre><code>const (\nSystemIsDarkMode = 0\n)\n</code></pre> <pre><code>const (\nWM_USER_SYSTRAY = w32.WM_USER + 1\n)\n</code></pre>"},{"location":"API/fullapi/#variables","title":"Variables","text":"<p>BuildInfo contains the build info for the application</p> <pre><code>var BuildInfo *debug.BuildInfo\n</code></pre> <p>BuildSettings contains the build settings for the application</p> <pre><code>var BuildSettings map[string]string\n</code></pre> <p>MacTitleBarDefault results in the default Mac MacTitleBar</p> <pre><code>var MacTitleBarDefault = MacTitleBar{\nAppearsTransparent:   false,\nHide:                 false,\nHideTitle:            false,\nFullSizeContent:      false,\nUseToolbar:           false,\nHideToolbarSeparator: false,\n}\n</code></pre> <p>MacTitleBarHidden results in a hidden title bar and a full size content window, yet the title bar still has the standard window controls (\u201ctraffic lights\u201d) in the top left.</p> <pre><code>var MacTitleBarHidden = MacTitleBar{\nAppearsTransparent:   true,\nHide:                 false,\nHideTitle:            true,\nFullSizeContent:      true,\nUseToolbar:           false,\nHideToolbarSeparator: false,\n}\n</code></pre> <p>MacTitleBarHiddenInset results in a hidden title bar with an alternative look where the traffic light buttons are slightly more inset from the window edge.</p> <pre><code>var MacTitleBarHiddenInset = MacTitleBar{\nAppearsTransparent:   true,\nHide:                 false,\nHideTitle:            true,\nFullSizeContent:      true,\nUseToolbar:           true,\nHideToolbarSeparator: true,\n}\n</code></pre> <p>MacTitleBarHiddenInsetUnified results in a hidden title bar with an alternative look where the traffic light buttons are even more inset from the window edge.</p> <pre><code>var MacTitleBarHiddenInsetUnified = MacTitleBar{\nAppearsTransparent:   true,\nHide:                 false,\nHideTitle:            true,\nFullSizeContent:      true,\nUseToolbar:           true,\nHideToolbarSeparator: true,\nToolbarStyle:         MacToolbarStyleUnified,\n}\n</code></pre> <p></p> <pre><code>var VirtualKeyCodes = map[uint]string{\n0x01: \"lbutton\",\n0x02: \"rbutton\",\n0x03: \"cancel\",\n0x04: \"mbutton\",\n0x05: \"xbutton1\",\n0x06: \"xbutton2\",\n0x08: \"back\",\n0x09: \"tab\",\n0x0C: \"clear\",\n0x0D: \"return\",\n0x10: \"shift\",\n0x11: \"control\",\n0x12: \"menu\",\n0x13: \"pause\",\n0x14: \"capital\",\n0x15: \"kana\",\n0x17: \"junja\",\n0x18: \"final\",\n0x19: \"hanja\",\n0x1B: \"escape\",\n0x1C: \"convert\",\n0x1D: \"nonconvert\",\n0x1E: \"accept\",\n0x1F: \"modechange\",\n0x20: \"space\",\n0x21: \"prior\",\n0x22: \"next\",\n0x23: \"end\",\n0x24: \"home\",\n0x25: \"left\",\n0x26: \"up\",\n0x27: \"right\",\n0x28: \"down\",\n0x29: \"select\",\n0x2A: \"print\",\n0x2B: \"execute\",\n0x2C: \"snapshot\",\n0x2D: \"insert\",\n0x2E: \"delete\",\n0x2F: \"help\",\n0x30: \"0\",\n0x31: \"1\",\n0x32: \"2\",\n0x33: \"3\",\n0x34: \"4\",\n0x35: \"5\",\n0x36: \"6\",\n0x37: \"7\",\n0x38: \"8\",\n0x39: \"9\",\n0x41: \"a\",\n0x42: \"b\",\n0x43: \"c\",\n0x44: \"d\",\n0x45: \"e\",\n0x46: \"f\",\n0x47: \"g\",\n0x48: \"h\",\n0x49: \"i\",\n0x4A: \"j\",\n0x4B: \"k\",\n0x4C: \"l\",\n0x4D: \"m\",\n0x4E: \"n\",\n0x4F: \"o\",\n0x50: \"p\",\n0x51: \"q\",\n0x52: \"r\",\n0x53: \"s\",\n0x54: \"t\",\n0x55: \"u\",\n0x56: \"v\",\n0x57: \"w\",\n0x58: \"x\",\n0x59: \"y\",\n0x5A: \"z\",\n0x5B: \"lwin\",\n0x5C: \"rwin\",\n0x5D: \"apps\",\n0x5F: \"sleep\",\n0x60: \"numpad0\",\n0x61: \"numpad1\",\n0x62: \"numpad2\",\n0x63: \"numpad3\",\n0x64: \"numpad4\",\n0x65: \"numpad5\",\n0x66: \"numpad6\",\n0x67: \"numpad7\",\n0x68: \"numpad8\",\n0x69: \"numpad9\",\n0x6A: \"multiply\",\n0x6B: \"add\",\n0x6C: \"separator\",\n0x6D: \"subtract\",\n0x6E: \"decimal\",\n0x6F: \"divide\",\n0x70: \"f1\",\n0x71: \"f2\",\n0x72: \"f3\",\n0x73: \"f4\",\n0x74: \"f5\",\n0x75: \"f6\",\n0x76: \"f7\",\n0x77: \"f8\",\n0x78: \"f9\",\n0x79: \"f10\",\n0x7A: \"f11\",\n0x7B: \"f12\",\n0x7C: \"f13\",\n0x7D: \"f14\",\n0x7E: \"f15\",\n0x7F: \"f16\",\n0x80: \"f17\",\n0x81: \"f18\",\n0x82: \"f19\",\n0x83: \"f20\",\n0x84: \"f21\",\n0x85: \"f22\",\n0x86: \"f23\",\n0x87: \"f24\",\n0x88: \"navigation_view\",\n0x89: \"navigation_menu\",\n0x8A: \"navigation_up\",\n0x8B: \"navigation_down\",\n0x8C: \"navigation_left\",\n0x8D: \"navigation_right\",\n0x8E: \"navigation_accept\",\n0x8F: \"navigation_cancel\",\n0x90: \"numlock\",\n0x91: \"scroll\",\n0x92: \"oem_nec_equal\",\n0x93: \"oem_fj_masshou\",\n0x94: \"oem_fj_touroku\",\n0x95: \"oem_fj_loya\",\n0x96: \"oem_fj_roya\",\n0xA0: \"lshift\",\n0xA1: \"rshift\",\n0xA2: \"lcontrol\",\n0xA3: \"rcontrol\",\n0xA4: \"lmenu\",\n0xA5: \"rmenu\",\n0xA6: \"browser_back\",\n0xA7: \"browser_forward\",\n0xA8: \"browser_refresh\",\n0xA9: \"browser_stop\",\n0xAA: \"browser_search\",\n0xAB: \"browser_favorites\",\n0xAC: \"browser_home\",\n0xAD: \"volume_mute\",\n0xAE: \"volume_down\",\n0xAF: \"volume_up\",\n0xB0: \"media_next_track\",\n0xB1: \"media_prev_track\",\n0xB2: \"media_stop\",\n0xB3: \"media_play_pause\",\n0xB4: \"launch_mail\",\n0xB5: \"launch_media_select\",\n0xB6: \"launch_app1\",\n0xB7: \"launch_app2\",\n0xBA: \"oem_1\",\n0xBB: \"oem_plus\",\n0xBC: \"oem_comma\",\n0xBD: \"oem_minus\",\n0xBE: \"oem_period\",\n0xBF: \"oem_2\",\n0xC0: \"oem_3\",\n0xC3: \"gamepad_a\",\n0xC4: \"gamepad_b\",\n0xC5: \"gamepad_x\",\n0xC6: \"gamepad_y\",\n0xC7: \"gamepad_right_shoulder\",\n0xC8: \"gamepad_left_shoulder\",\n0xC9: \"gamepad_left_trigger\",\n0xCA: \"gamepad_right_trigger\",\n0xCB: \"gamepad_dpad_up\",\n0xCC: \"gamepad_dpad_down\",\n0xCD: \"gamepad_dpad_left\",\n0xCE: \"gamepad_dpad_right\",\n0xCF: \"gamepad_menu\",\n0xD0: \"gamepad_view\",\n0xD1: \"gamepad_left_thumbstick_button\",\n0xD2: \"gamepad_right_thumbstick_button\",\n0xD3: \"gamepad_left_thumbstick_up\",\n0xD4: \"gamepad_left_thumbstick_down\",\n0xD5: \"gamepad_left_thumbstick_right\",\n0xD6: \"gamepad_left_thumbstick_left\",\n0xD7: \"gamepad_right_thumbstick_up\",\n0xD8: \"gamepad_right_thumbstick_down\",\n0xD9: \"gamepad_right_thumbstick_right\",\n0xDA: \"gamepad_right_thumbstick_left\",\n0xDB: \"oem_4\",\n0xDC: \"oem_5\",\n0xDD: \"oem_6\",\n0xDE: \"oem_7\",\n0xDF: \"oem_8\",\n0xE1: \"oem_ax\",\n0xE2: \"oem_102\",\n0xE3: \"ico_help\",\n0xE4: \"ico_00\",\n0xE5: \"processkey\",\n0xE6: \"ico_clear\",\n0xE7: \"packet\",\n0xE9: \"oem_reset\",\n0xEA: \"oem_jump\",\n0xEB: \"oem_pa1\",\n0xEC: \"oem_pa2\",\n0xED: \"oem_pa3\",\n0xEE: \"oem_wsctrl\",\n0xEF: \"oem_cusel\",\n0xF0: \"oem_attn\",\n0xF1: \"oem_finish\",\n0xF2: \"oem_copy\",\n0xF3: \"oem_auto\",\n0xF4: \"oem_enlw\",\n0xF5: \"oem_backtab\",\n0xF6: \"attn\",\n0xF7: \"crsel\",\n0xF8: \"exsel\",\n0xF9: \"ereof\",\n0xFA: \"play\",\n0xFB: \"zoom\",\n0xFC: \"noname\",\n0xFD: \"pa1\",\n0xFE: \"oem_clear\",\n}\n</code></pre> <p></p> <pre><code>var WebviewWindowDefaults = &amp;WebviewWindowOptions{\nTitle:  \"\",\nWidth:  800,\nHeight: 600,\nURL:    \"\",\nBackgroundColour: RGBA{\nRed:   255,\nGreen: 255,\nBlue:  255,\nAlpha: 255,\n},\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#func-defaultlogger","title":"func DefaultLogger","text":"<pre><code>func DefaultLogger(level slog.Level) *slog.Logger\n</code></pre>"},{"location":"API/fullapi/#func-fatal","title":"func Fatal","text":"<pre><code>func Fatal(message string, args ...interface{})\n</code></pre>"},{"location":"API/fullapi/#func-invokeasync","title":"func InvokeAsync","text":"<pre><code>func InvokeAsync(fn func())\n</code></pre>"},{"location":"API/fullapi/#func-invokesync","title":"func InvokeSync","text":"<pre><code>func InvokeSync(fn func())\n</code></pre>"},{"location":"API/fullapi/#func-invokesyncwitherror","title":"func InvokeSyncWithError","text":"<pre><code>func InvokeSyncWithError(fn func() error) (err error)\n</code></pre>"},{"location":"API/fullapi/#func-invokesyncwithresult","title":"func InvokeSyncWithResult","text":"<pre><code>func InvokeSyncWithResult[T any](fn func() T) (res T)\n</code></pre>"},{"location":"API/fullapi/#func-invokesyncwithresultanderror","title":"func InvokeSyncWithResultAndError","text":"<pre><code>func InvokeSyncWithResultAndError[T any](fn func() (T, error)) (res T, err error)\n</code></pre>"},{"location":"API/fullapi/#func-newiconfromresource","title":"func NewIconFromResource","text":"<pre><code>func NewIconFromResource(instance w32.HINSTANCE, resId uint16) (w32.HICON, error)\n</code></pre>"},{"location":"API/fullapi/#func-scaletodefaultdpi","title":"func ScaleToDefaultDPI","text":"<pre><code>func ScaleToDefaultDPI(pixels int, dpi uint) int\n</code></pre>"},{"location":"API/fullapi/#func-scalewithdpi","title":"func ScaleWithDPI","text":"<pre><code>func ScaleWithDPI(pixels int, dpi uint) int\n</code></pre>"},{"location":"API/fullapi/#type-activationpolicy","title":"type ActivationPolicy","text":"<p>ActivationPolicy is the activation policy for the application.</p> <pre><code>type ActivationPolicy int\n</code></pre> <p></p> <pre><code>const (\n// ActivationPolicyRegular is used for applications that have a user interface,\nActivationPolicyRegular ActivationPolicy = iota\n// ActivationPolicyAccessory is used for applications that do not have a main window,\n// such as system tray applications or background applications.\nActivationPolicyAccessory\nActivationPolicyProhibited\n)\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-app","title":"type App","text":"<pre><code>type App struct {\n// The main application menu\nApplicationMenu *Menu\nEvents *EventProcessor\nLogger *slog.Logger\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-get","title":"func Get","text":"<pre><code>func Get() *App\n</code></pre>"},{"location":"API/fullapi/#func-new","title":"func New","text":"<pre><code>func New(appOptions Options) *App\n</code></pre>"},{"location":"API/fullapi/#func-app-capabilities","title":"func (*App) Capabilities","text":"<pre><code>func (a *App) Capabilities() capabilities.Capabilities\n</code></pre>"},{"location":"API/fullapi/#func-app-clipboard","title":"func (*App) Clipboard","text":"<pre><code>func (a *App) Clipboard() *Clipboard\n</code></pre>"},{"location":"API/fullapi/#func-app-currentwindow","title":"func (*App) CurrentWindow","text":"<pre><code>func (a *App) CurrentWindow() *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-app-getpid","title":"func (*App) GetPID","text":"<pre><code>func (a *App) GetPID() int\n</code></pre>"},{"location":"API/fullapi/#func-app-getprimaryscreen","title":"func (*App) GetPrimaryScreen","text":"<pre><code>func (a *App) GetPrimaryScreen() (*Screen, error)\n</code></pre>"},{"location":"API/fullapi/#func-app-getscreens","title":"func (*App) GetScreens","text":"<pre><code>func (a *App) GetScreens() ([]*Screen, error)\n</code></pre>"},{"location":"API/fullapi/#func-app-getwindowbyname","title":"func (*App) GetWindowByName","text":"<pre><code>func (a *App) GetWindowByName(name string) *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-app-hide","title":"func (*App) Hide","text":"<pre><code>func (a *App) Hide()\n</code></pre>"},{"location":"API/fullapi/#func-app-isdarkmode","title":"func (*App) IsDarkMode","text":"<pre><code>func (a *App) IsDarkMode() bool\n</code></pre>"},{"location":"API/fullapi/#func-app-newmenu","title":"func (*App) NewMenu","text":"<pre><code>func (a *App) NewMenu() *Menu\n</code></pre>"},{"location":"API/fullapi/#func-app-newsystemtray","title":"func (*App) NewSystemTray","text":"<pre><code>func (a *App) NewSystemTray() *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-app-newwebviewwindow","title":"func (*App) NewWebviewWindow","text":"<pre><code>func (a *App) NewWebviewWindow() *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-app-newwebviewwindowwithoptions","title":"func (*App) NewWebviewWindowWithOptions","text":"<pre><code>func (a *App) NewWebviewWindowWithOptions(windowOptions WebviewWindowOptions) *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-app-on","title":"func (*App) On","text":"<pre><code>func (a *App) On(eventType events.ApplicationEventType, callback func(event *Event)) func()\n</code></pre>"},{"location":"API/fullapi/#func-app-onwindowcreation","title":"func (*App) OnWindowCreation","text":"<pre><code>func (a *App) OnWindowCreation(callback func(window *WebviewWindow))\n</code></pre>"},{"location":"API/fullapi/#func-app-quit","title":"func (*App) Quit","text":"<pre><code>func (a *App) Quit()\n</code></pre>"},{"location":"API/fullapi/#func-app-registercontextmenu","title":"func (*App) RegisterContextMenu","text":"<pre><code>func (a *App) RegisterContextMenu(name string, menu *Menu)\n</code></pre>"},{"location":"API/fullapi/#func-app-registerhook","title":"func (*App) RegisterHook","text":"<pre><code>func (a *App) RegisterHook(eventType events.ApplicationEventType, callback func(event *Event)) func()\n</code></pre> <p>RegisterHook registers a hook for the given event type. Hooks are called before the event listeners and can cancel the event. The returned function can be called to remove the hook.</p> <p></p>"},{"location":"API/fullapi/#func-app-run","title":"func (*App) Run","text":"<pre><code>func (a *App) Run() error\n</code></pre>"},{"location":"API/fullapi/#func-app-setmenu","title":"func (*App) SetMenu","text":"<pre><code>func (a *App) SetMenu(menu *Menu)\n</code></pre>"},{"location":"API/fullapi/#func-app-show","title":"func (*App) Show","text":"<pre><code>func (a *App) Show()\n</code></pre>"},{"location":"API/fullapi/#func-app-showaboutdialog","title":"func (*App) ShowAboutDialog","text":"<pre><code>func (a *App) ShowAboutDialog()\n</code></pre>"},{"location":"API/fullapi/#type-applicationeventcontext","title":"type ApplicationEventContext","text":"<pre><code>type ApplicationEventContext struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-applicationeventcontext-isdarkmode","title":"func (ApplicationEventContext) IsDarkMode","text":"<pre><code>func (c ApplicationEventContext) IsDarkMode() bool\n</code></pre>"},{"location":"API/fullapi/#func-applicationeventcontext-openedfiles","title":"func (ApplicationEventContext) OpenedFiles","text":"<pre><code>func (c ApplicationEventContext) OpenedFiles() []string\n</code></pre>"},{"location":"API/fullapi/#type-args","title":"type Args","text":"<pre><code>type Args struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-args-bool","title":"func (*Args) Bool","text":"<pre><code>func (a *Args) Bool(s string) *bool\n</code></pre>"},{"location":"API/fullapi/#func-args-float64","title":"func (*Args) Float64","text":"<pre><code>func (a *Args) Float64(s string) *float64\n</code></pre>"},{"location":"API/fullapi/#func-args-int","title":"func (*Args) Int","text":"<pre><code>func (a *Args) Int(s string) *int\n</code></pre>"},{"location":"API/fullapi/#func-args-string","title":"func (*Args) String","text":"<pre><code>func (a *Args) String(key string) *string\n</code></pre>"},{"location":"API/fullapi/#func-args-uint","title":"func (*Args) UInt","text":"<pre><code>func (a *Args) UInt(s string) *uint\n</code></pre>"},{"location":"API/fullapi/#func-args-uint8","title":"func (*Args) UInt8","text":"<pre><code>func (a *Args) UInt8(s string) *uint8\n</code></pre>"},{"location":"API/fullapi/#type-assetoptions","title":"type AssetOptions","text":"<p>AssetOptions defines the configuration of the AssetServer.</p> <pre><code>type AssetOptions struct {\n// FS defines the static assets to be used. A GET request is first tried to be served from this FS. If the FS returns\n// `os.ErrNotExist` for that file, the request handling will fallback to the Handler and tries to serve the GET\n// request from it.\n//\n// If set to nil, all GET requests will be forwarded to Handler.\nFS  fs.FS\n// Handler will be called for every GET request that can't be served from FS, due to `os.ErrNotExist`. Furthermore all\n// non GET requests will always be served from this Handler.\n//\n// If not defined, the result is the following in cases where the Handler would have been called:\n//   GET request:   `http.StatusNotFound`\n//   Other request: `http.StatusMethodNotAllowed`\nHandler http.Handler\n// Middleware is HTTP Middleware which allows to hook into the AssetServer request chain. It allows to skip the default\n// request handler dynamically, e.g. implement specialized Routing etc.\n// The Middleware is called to build a new `http.Handler` used by the AssetSever and it also receives the default\n// handler used by the AssetServer as an argument.\n//\n// If not defined, the default AssetServer request chain is executed.\n//\n// Multiple Middlewares can be chained together with:\n//   ChainMiddleware(middleware ...Middleware) Middleware\nMiddleware Middleware\n// External URL can be set to a development server URL so that all requests are forwarded to it. This is useful\n// when using a development server like `vite` or `snowpack` which serves the assets on a different port.\nExternalURL string\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-backdroptype","title":"type BackdropType","text":"<pre><code>type BackdropType int32\n</code></pre> <pre><code>const (\nAuto    BackdropType = 0\nNone    BackdropType = 1\nMica    BackdropType = 2\nAcrylic BackdropType = 3\nTabbed  BackdropType = 4\n)\n</code></pre>"},{"location":"API/fullapi/#type-backgroundtype","title":"type BackgroundType","text":"<pre><code>type BackgroundType int\n</code></pre> <pre><code>const (\nBackgroundTypeSolid BackgroundType = iota\nBackgroundTypeTransparent\nBackgroundTypeTranslucent\n)\n</code></pre>"},{"location":"API/fullapi/#type-bindings","title":"type Bindings","text":"<pre><code>type Bindings struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newbindings","title":"func NewBindings","text":"<pre><code>func NewBindings(structs []any, aliases map[uint32]uint32) (*Bindings, error)\n</code></pre>"},{"location":"API/fullapi/#func-bindings-add","title":"func (*Bindings) Add","text":"<pre><code>func (b *Bindings) Add(structPtr interface{}) error\n</code></pre> <p>Add the given struct methods to the Bindings</p> <p></p>"},{"location":"API/fullapi/#func-bindings-addplugins","title":"func (*Bindings) AddPlugins","text":"<pre><code>func (b *Bindings) AddPlugins(plugins map[string]Plugin) error\n</code></pre>"},{"location":"API/fullapi/#func-bindings-generateid","title":"func (*Bindings) GenerateID","text":"<pre><code>func (b *Bindings) GenerateID(name string) (uint32, error)\n</code></pre> <p>GenerateID generates a unique ID for a binding</p> <p></p>"},{"location":"API/fullapi/#func-bindings-get","title":"func (*Bindings) Get","text":"<pre><code>func (b *Bindings) Get(options *CallOptions) *BoundMethod\n</code></pre> <p>Get returns the bound method with the given name</p> <p></p>"},{"location":"API/fullapi/#func-bindings-getbyid","title":"func (*Bindings) GetByID","text":"<pre><code>func (b *Bindings) GetByID(id uint32) *BoundMethod\n</code></pre> <p>GetByID returns the bound method with the given ID</p> <p></p>"},{"location":"API/fullapi/#type-boundmethod","title":"type BoundMethod","text":"<p>BoundMethod defines all the data related to a Go method that is bound to the Wails application</p> <pre><code>type BoundMethod struct {\nID          uint32        `json:\"id\"`\nName        string        `json:\"name\"`\nInputs      []*Parameter  `json:\"inputs,omitempty\"`\nOutputs     []*Parameter  `json:\"outputs,omitempty\"`\nComments    string        `json:\"comments,omitempty\"`\nMethod      reflect.Value `json:\"-\"`\nPackageName string\nStructName  string\nPackagePath string\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#func-boundmethod-call","title":"func (*BoundMethod) Call","text":"<pre><code>func (b *BoundMethod) Call(args []interface{}) (returnValue interface{}, err error)\n</code></pre> <p>Call will attempt to call this bound method with the given args</p> <p></p>"},{"location":"API/fullapi/#func-boundmethod-string","title":"func (*BoundMethod) String","text":"<pre><code>func (b *BoundMethod) String() string\n</code></pre>"},{"location":"API/fullapi/#type-button","title":"type Button","text":"<pre><code>type Button struct {\nLabel     string\nIsCancel  bool\nIsDefault bool\nCallback  func()\n}\n</code></pre>"},{"location":"API/fullapi/#func-button-onclick","title":"func (*Button) OnClick","text":"<pre><code>func (b *Button) OnClick(callback func()) *Button\n</code></pre>"},{"location":"API/fullapi/#func-button-setascancel","title":"func (*Button) SetAsCancel","text":"<pre><code>func (b *Button) SetAsCancel() *Button\n</code></pre>"},{"location":"API/fullapi/#func-button-setasdefault","title":"func (*Button) SetAsDefault","text":"<pre><code>func (b *Button) SetAsDefault() *Button\n</code></pre>"},{"location":"API/fullapi/#type-calloptions","title":"type CallOptions","text":"<pre><code>type CallOptions struct {\nMethodID    uint32 `json:\"methodID\"`\nPackageName string `json:\"packageName\"`\nStructName  string `json:\"structName\"`\nMethodName  string `json:\"methodName\"`\nArgs        []any  `json:\"args\"`\n}\n</code></pre>"},{"location":"API/fullapi/#func-calloptions-name","title":"func (CallOptions) Name","text":"<pre><code>func (c CallOptions) Name() string\n</code></pre>"},{"location":"API/fullapi/#type-clipboard","title":"type Clipboard","text":"<pre><code>type Clipboard struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-clipboard-settext","title":"func (*Clipboard) SetText","text":"<pre><code>func (c *Clipboard) SetText(text string) bool\n</code></pre>"},{"location":"API/fullapi/#func-clipboard-text","title":"func (*Clipboard) Text","text":"<pre><code>func (c *Clipboard) Text() (string, bool)\n</code></pre>"},{"location":"API/fullapi/#type-context","title":"type Context","text":"<pre><code>type Context struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-context-clickedmenuitem","title":"func (*Context) ClickedMenuItem","text":"<pre><code>func (c *Context) ClickedMenuItem() *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-context-contextmenudata","title":"func (*Context) ContextMenuData","text":"<pre><code>func (c *Context) ContextMenuData() any\n</code></pre>"},{"location":"API/fullapi/#func-context-ischecked","title":"func (*Context) IsChecked","text":"<pre><code>func (c *Context) IsChecked() bool\n</code></pre>"},{"location":"API/fullapi/#type-contextmenudata","title":"type ContextMenuData","text":"<pre><code>type ContextMenuData struct {\nId   string `json:\"id\"`\nX    int    `json:\"x\"`\nY    int    `json:\"y\"`\nData any    `json:\"data\"`\n}\n</code></pre>"},{"location":"API/fullapi/#type-dialogtype","title":"type DialogType","text":"<pre><code>type DialogType int\n</code></pre> <pre><code>const (\nInfoDialogType DialogType = iota\nQuestionDialogType\nWarningDialogType\nErrorDialogType\nOpenDirectoryDialogType\n)\n</code></pre>"},{"location":"API/fullapi/#type-event","title":"type Event","text":"<pre><code>type Event struct {\nId  uint\nCancelled bool\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-event-cancel","title":"func (*Event) Cancel","text":"<pre><code>func (w *Event) Cancel()\n</code></pre>"},{"location":"API/fullapi/#func-event-context","title":"func (*Event) Context","text":"<pre><code>func (w *Event) Context() *ApplicationEventContext\n</code></pre>"},{"location":"API/fullapi/#type-eventlistener","title":"type EventListener","text":"<pre><code>type EventListener struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#type-eventprocessor","title":"type EventProcessor","text":"<p>EventProcessor handles custom events</p> <pre><code>type EventProcessor struct {\n// contains filtered or unexported fields\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#func-newwailseventprocessor","title":"func NewWailsEventProcessor","text":"<pre><code>func NewWailsEventProcessor(dispatchEventToWindows func(*WailsEvent)) *EventProcessor\n</code></pre>"},{"location":"API/fullapi/#func-eventprocessor-emit","title":"func (*EventProcessor) Emit","text":"<pre><code>func (e *EventProcessor) Emit(thisEvent *WailsEvent)\n</code></pre> <p>Emit sends an event to all listeners</p> <p></p>"},{"location":"API/fullapi/#func-eventprocessor-off","title":"func (*EventProcessor) Off","text":"<pre><code>func (e *EventProcessor) Off(eventName string)\n</code></pre>"},{"location":"API/fullapi/#func-eventprocessor-offall","title":"func (*EventProcessor) OffAll","text":"<pre><code>func (e *EventProcessor) OffAll()\n</code></pre>"},{"location":"API/fullapi/#func-eventprocessor-on","title":"func (*EventProcessor) On","text":"<pre><code>func (e *EventProcessor) On(eventName string, callback func(event *WailsEvent)) func()\n</code></pre> <p>On is the equivalent of Javascript's `addEventListener`</p> <p></p>"},{"location":"API/fullapi/#func-eventprocessor-onmultiple","title":"func (*EventProcessor) OnMultiple","text":"<pre><code>func (e *EventProcessor) OnMultiple(eventName string, callback func(event *WailsEvent), counter int) func()\n</code></pre> <p>OnMultiple is the same as `On` but will unregister after `count` events</p> <p></p>"},{"location":"API/fullapi/#func-eventprocessor-once","title":"func (*EventProcessor) Once","text":"<pre><code>func (e *EventProcessor) Once(eventName string, callback func(event *WailsEvent)) func()\n</code></pre> <p>Once is the same as `On` but will unregister after the first event</p> <p></p>"},{"location":"API/fullapi/#func-eventprocessor-registerhook","title":"func (*EventProcessor) RegisterHook","text":"<pre><code>func (e *EventProcessor) RegisterHook(eventName string, callback func(*WailsEvent)) func()\n</code></pre> <p>RegisterHook provides a means of registering methods to be called before emitting the event</p> <p></p>"},{"location":"API/fullapi/#type-filefilter","title":"type FileFilter","text":"<pre><code>type FileFilter struct {\nDisplayName string // Filter information EG: \"Image Files (*.jpg, *.png)\"\nPattern     string // semicolon separated list of extensions, EG: \"*.jpg;*.png\"\n}\n</code></pre>"},{"location":"API/fullapi/#type-iconposition","title":"type IconPosition","text":"<pre><code>type IconPosition int\n</code></pre>"},{"location":"API/fullapi/#type-macappearancetype","title":"type MacAppearanceType","text":"<p>MacAppearanceType is a type of Appearance for Cocoa windows</p> <pre><code>type MacAppearanceType string\n</code></pre> <p></p> <pre><code>const (\n// DefaultAppearance uses the default system value\nDefaultAppearance MacAppearanceType = \"\"\n// NSAppearanceNameAqua - The standard light system appearance.\nNSAppearanceNameAqua MacAppearanceType = \"NSAppearanceNameAqua\"\n// NSAppearanceNameDarkAqua - The standard dark system appearance.\nNSAppearanceNameDarkAqua MacAppearanceType = \"NSAppearanceNameDarkAqua\"\n// NSAppearanceNameVibrantLight - The light vibrant appearance\nNSAppearanceNameVibrantLight MacAppearanceType = \"NSAppearanceNameVibrantLight\"\n// NSAppearanceNameAccessibilityHighContrastAqua - A high-contrast version of the standard light system appearance.\nNSAppearanceNameAccessibilityHighContrastAqua MacAppearanceType = \"NSAppearanceNameAccessibilityHighContrastAqua\"\n// NSAppearanceNameAccessibilityHighContrastDarkAqua - A high-contrast version of the standard dark system appearance.\nNSAppearanceNameAccessibilityHighContrastDarkAqua MacAppearanceType = \"NSAppearanceNameAccessibilityHighContrastDarkAqua\"\n// NSAppearanceNameAccessibilityHighContrastVibrantLight - A high-contrast version of the light vibrant appearance.\nNSAppearanceNameAccessibilityHighContrastVibrantLight MacAppearanceType = \"NSAppearanceNameAccessibilityHighContrastVibrantLight\"\n// NSAppearanceNameAccessibilityHighContrastVibrantDark - A high-contrast version of the dark vibrant appearance.\nNSAppearanceNameAccessibilityHighContrastVibrantDark MacAppearanceType = \"NSAppearanceNameAccessibilityHighContrastVibrantDark\"\n)\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-macbackdrop","title":"type MacBackdrop","text":"<p>MacBackdrop is the backdrop type for macOS</p> <pre><code>type MacBackdrop int\n</code></pre> <p></p> <pre><code>const (\n// MacBackdropNormal - The default value. The window will have a normal opaque background.\nMacBackdropNormal MacBackdrop = iota\n// MacBackdropTransparent - The window will have a transparent background, with the content underneath it being visible\nMacBackdropTransparent\n// MacBackdropTranslucent - The window will have a translucent background, with the content underneath it being \"fuzzy\" or \"frosted\"\nMacBackdropTranslucent\n)\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-macoptions","title":"type MacOptions","text":"<p>MacOptions contains options for macOS applications.</p> <pre><code>type MacOptions struct {\n// ActivationPolicy is the activation policy for the application. Defaults to\n// applicationActivationPolicyRegular.\nActivationPolicy ActivationPolicy\n// If set to true, the application will terminate when the last window is closed.\nApplicationShouldTerminateAfterLastWindowClosed bool\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-mactitlebar","title":"type MacTitleBar","text":"<p>MacTitleBar contains options for the Mac titlebar</p> <pre><code>type MacTitleBar struct {\n// AppearsTransparent will make the titlebar transparent\nAppearsTransparent bool\n// Hide will hide the titlebar\nHide bool\n// HideTitle will hide the title\nHideTitle bool\n// FullSizeContent will extend the window content to the full size of the window\nFullSizeContent bool\n// UseToolbar will use a toolbar instead of a titlebar\nUseToolbar bool\n// HideToolbarSeparator will hide the toolbar separator\nHideToolbarSeparator bool\n// ToolbarStyle is the style of toolbar to use\nToolbarStyle MacToolbarStyle\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-mactoolbarstyle","title":"type MacToolbarStyle","text":"<p>MacToolbarStyle is the style of toolbar for macOS</p> <pre><code>type MacToolbarStyle int\n</code></pre> <p></p> <pre><code>const (\n// MacToolbarStyleAutomatic - The default value. The style will be determined by the window's given configuration\nMacToolbarStyleAutomatic MacToolbarStyle = iota\n// MacToolbarStyleExpanded - The toolbar will appear below the window title\nMacToolbarStyleExpanded\n// MacToolbarStylePreference - The toolbar will appear below the window title and the items in the toolbar will attempt to have equal widths when possible\nMacToolbarStylePreference\n// MacToolbarStyleUnified - The window title will appear inline with the toolbar when visible\nMacToolbarStyleUnified\n// MacToolbarStyleUnifiedCompact - Same as MacToolbarStyleUnified, but with reduced margins in the toolbar allowing more focus to be on the contents of the window\nMacToolbarStyleUnifiedCompact\n)\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-macwindow","title":"type MacWindow","text":"<p>MacWindow contains macOS specific options for Webview Windows</p> <pre><code>type MacWindow struct {\n// Backdrop is the backdrop type for the window\nBackdrop MacBackdrop\n// DisableShadow will disable the window shadow\nDisableShadow bool\n// TitleBar contains options for the Mac titlebar\nTitleBar MacTitleBar\n// Appearance is the appearance type for the window\nAppearance MacAppearanceType\n// InvisibleTitleBarHeight defines the height of an invisible titlebar which responds to dragging\nInvisibleTitleBarHeight int\n// Maps events from platform specific to common event types\nEventMapping map[events.WindowEventType]events.WindowEventType\n// EnableFraudulentWebsiteWarnings will enable warnings for fraudulent websites.\n// Default: false\nEnableFraudulentWebsiteWarnings bool\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-menu","title":"type Menu","text":"<pre><code>type Menu struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newmenu","title":"func NewMenu","text":"<pre><code>func NewMenu() *Menu\n</code></pre>"},{"location":"API/fullapi/#func-menu-add","title":"func (*Menu) Add","text":"<pre><code>func (m *Menu) Add(label string) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menu-addcheckbox","title":"func (*Menu) AddCheckbox","text":"<pre><code>func (m *Menu) AddCheckbox(label string, enabled bool) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menu-addradio","title":"func (*Menu) AddRadio","text":"<pre><code>func (m *Menu) AddRadio(label string, enabled bool) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menu-addrole","title":"func (*Menu) AddRole","text":"<pre><code>func (m *Menu) AddRole(role Role) *Menu\n</code></pre>"},{"location":"API/fullapi/#func-menu-addseparator","title":"func (*Menu) AddSeparator","text":"<pre><code>func (m *Menu) AddSeparator()\n</code></pre>"},{"location":"API/fullapi/#func-menu-addsubmenu","title":"func (*Menu) AddSubmenu","text":"<pre><code>func (m *Menu) AddSubmenu(s string) *Menu\n</code></pre>"},{"location":"API/fullapi/#func-menu-setlabel","title":"func (*Menu) SetLabel","text":"<pre><code>func (m *Menu) SetLabel(label string)\n</code></pre>"},{"location":"API/fullapi/#func-menu-update","title":"func (*Menu) Update","text":"<pre><code>func (m *Menu) Update()\n</code></pre>"},{"location":"API/fullapi/#type-menuitem","title":"type MenuItem","text":"<pre><code>type MenuItem struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-checked","title":"func (*MenuItem) Checked","text":"<pre><code>func (m *MenuItem) Checked() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-enabled","title":"func (*MenuItem) Enabled","text":"<pre><code>func (m *MenuItem) Enabled() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-hidden","title":"func (*MenuItem) Hidden","text":"<pre><code>func (m *MenuItem) Hidden() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-ischeckbox","title":"func (*MenuItem) IsCheckbox","text":"<pre><code>func (m *MenuItem) IsCheckbox() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-isradio","title":"func (*MenuItem) IsRadio","text":"<pre><code>func (m *MenuItem) IsRadio() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-isseparator","title":"func (*MenuItem) IsSeparator","text":"<pre><code>func (m *MenuItem) IsSeparator() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-issubmenu","title":"func (*MenuItem) IsSubmenu","text":"<pre><code>func (m *MenuItem) IsSubmenu() bool\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-label","title":"func (*MenuItem) Label","text":"<pre><code>func (m *MenuItem) Label() string\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-onclick","title":"func (*MenuItem) OnClick","text":"<pre><code>func (m *MenuItem) OnClick(f func(*Context)) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-setaccelerator","title":"func (*MenuItem) SetAccelerator","text":"<pre><code>func (m *MenuItem) SetAccelerator(shortcut string) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-setchecked","title":"func (*MenuItem) SetChecked","text":"<pre><code>func (m *MenuItem) SetChecked(checked bool) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-setenabled","title":"func (*MenuItem) SetEnabled","text":"<pre><code>func (m *MenuItem) SetEnabled(enabled bool) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-sethidden","title":"func (*MenuItem) SetHidden","text":"<pre><code>func (m *MenuItem) SetHidden(hidden bool) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-setlabel","title":"func (*MenuItem) SetLabel","text":"<pre><code>func (m *MenuItem) SetLabel(s string) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-settooltip","title":"func (*MenuItem) SetTooltip","text":"<pre><code>func (m *MenuItem) SetTooltip(s string) *MenuItem\n</code></pre>"},{"location":"API/fullapi/#func-menuitem-tooltip","title":"func (*MenuItem) Tooltip","text":"<pre><code>func (m *MenuItem) Tooltip() string\n</code></pre>"},{"location":"API/fullapi/#type-messagedialog","title":"type MessageDialog","text":"<pre><code>type MessageDialog struct {\nMessageDialogOptions\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-errordialog","title":"func ErrorDialog","text":"<pre><code>func ErrorDialog() *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-infodialog","title":"func InfoDialog","text":"<pre><code>func InfoDialog() *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-opendirectorydialog","title":"func OpenDirectoryDialog","text":"<pre><code>func OpenDirectoryDialog() *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-questiondialog","title":"func QuestionDialog","text":"<pre><code>func QuestionDialog() *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-warningdialog","title":"func WarningDialog","text":"<pre><code>func WarningDialog() *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-addbutton","title":"func (*MessageDialog) AddButton","text":"<pre><code>func (d *MessageDialog) AddButton(s string) *Button\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-addbuttons","title":"func (*MessageDialog) AddButtons","text":"<pre><code>func (d *MessageDialog) AddButtons(buttons []*Button) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-attachtowindow","title":"func (*MessageDialog) AttachToWindow","text":"<pre><code>func (d *MessageDialog) AttachToWindow(window *WebviewWindow) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-setcancelbutton","title":"func (*MessageDialog) SetCancelButton","text":"<pre><code>func (d *MessageDialog) SetCancelButton(button *Button) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-setdefaultbutton","title":"func (*MessageDialog) SetDefaultButton","text":"<pre><code>func (d *MessageDialog) SetDefaultButton(button *Button) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-seticon","title":"func (*MessageDialog) SetIcon","text":"<pre><code>func (d *MessageDialog) SetIcon(icon []byte) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-setmessage","title":"func (*MessageDialog) SetMessage","text":"<pre><code>func (d *MessageDialog) SetMessage(message string) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-settitle","title":"func (*MessageDialog) SetTitle","text":"<pre><code>func (d *MessageDialog) SetTitle(title string) *MessageDialog\n</code></pre>"},{"location":"API/fullapi/#func-messagedialog-show","title":"func (*MessageDialog) Show","text":"<pre><code>func (d *MessageDialog) Show()\n</code></pre>"},{"location":"API/fullapi/#type-messagedialogoptions","title":"type MessageDialogOptions","text":"<pre><code>type MessageDialogOptions struct {\nDialogType DialogType\nTitle      string\nMessage    string\nButtons    []*Button\nIcon       []byte\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#type-messageprocessor","title":"type MessageProcessor","text":"<pre><code>type MessageProcessor struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newmessageprocessor","title":"func NewMessageProcessor","text":"<pre><code>func NewMessageProcessor(logger *slog.Logger) *MessageProcessor\n</code></pre>"},{"location":"API/fullapi/#func-messageprocessor-error","title":"func (*MessageProcessor) Error","text":"<pre><code>func (m *MessageProcessor) Error(message string, args ...any)\n</code></pre>"},{"location":"API/fullapi/#func-messageprocessor-handleruntimecall","title":"func (*MessageProcessor) HandleRuntimeCall","text":"<pre><code>func (m *MessageProcessor) HandleRuntimeCall(rw http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"API/fullapi/#func-messageprocessor-handleruntimecallwithids","title":"func (*MessageProcessor) HandleRuntimeCallWithIDs","text":"<pre><code>func (m *MessageProcessor) HandleRuntimeCallWithIDs(rw http.ResponseWriter, r *http.Request)\n</code></pre>"},{"location":"API/fullapi/#func-messageprocessor-info","title":"func (*MessageProcessor) Info","text":"<pre><code>func (m *MessageProcessor) Info(message string, args ...any)\n</code></pre>"},{"location":"API/fullapi/#type-middleware","title":"type Middleware","text":"<p>Middleware defines HTTP middleware that can be applied to the AssetServer. The handler passed as next is the next handler in the chain. One can decide to call the next handler or implement a specialized handling.</p> <pre><code>type Middleware func(next http.Handler) http.Handler\n</code></pre> <p></p>"},{"location":"API/fullapi/#func-chainmiddleware","title":"func ChainMiddleware","text":"<pre><code>func ChainMiddleware(middleware ...Middleware) Middleware\n</code></pre> <p>ChainMiddleware allows chaining multiple middlewares to one middleware.</p> <p></p>"},{"location":"API/fullapi/#type-openfiledialogoptions","title":"type OpenFileDialogOptions","text":"<pre><code>type OpenFileDialogOptions struct {\nCanChooseDirectories            bool\nCanChooseFiles                  bool\nCanCreateDirectories            bool\nShowHiddenFiles                 bool\nResolvesAliases                 bool\nAllowsMultipleSelection         bool\nHideExtension                   bool\nCanSelectHiddenExtension        bool\nTreatsFilePackagesAsDirectories bool\nAllowsOtherFileTypes            bool\nFilters                         []FileFilter\nWindow                          *WebviewWindow\nTitle      string\nMessage    string\nButtonText string\nDirectory  string\n}\n</code></pre>"},{"location":"API/fullapi/#type-openfiledialogstruct","title":"type OpenFileDialogStruct","text":"<pre><code>type OpenFileDialogStruct struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialog","title":"func OpenFileDialog","text":"<pre><code>func OpenFileDialog() *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogwithoptions","title":"func OpenFileDialogWithOptions","text":"<pre><code>func OpenFileDialogWithOptions(options *OpenFileDialogOptions) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-addfilter","title":"func (*OpenFileDialogStruct) AddFilter","text":"<pre><code>func (d *OpenFileDialogStruct) AddFilter(displayName, pattern string) *OpenFileDialogStruct\n</code></pre> <p>AddFilter adds a filter to the dialog. The filter is a display name and a semicolon separated list of extensions. EG: AddFilter(\"Image Files\", \"*.jpg;*.png\")</p> <p></p>"},{"location":"API/fullapi/#func-openfiledialogstruct-allowsotherfiletypes","title":"func (*OpenFileDialogStruct) AllowsOtherFileTypes","text":"<pre><code>func (d *OpenFileDialogStruct) AllowsOtherFileTypes(allowsOtherFileTypes bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-attachtowindow","title":"func (*OpenFileDialogStruct) AttachToWindow","text":"<pre><code>func (d *OpenFileDialogStruct) AttachToWindow(window *WebviewWindow) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-canchoosedirectories","title":"func (*OpenFileDialogStruct) CanChooseDirectories","text":"<pre><code>func (d *OpenFileDialogStruct) CanChooseDirectories(canChooseDirectories bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-canchoosefiles","title":"func (*OpenFileDialogStruct) CanChooseFiles","text":"<pre><code>func (d *OpenFileDialogStruct) CanChooseFiles(canChooseFiles bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-cancreatedirectories","title":"func (*OpenFileDialogStruct) CanCreateDirectories","text":"<pre><code>func (d *OpenFileDialogStruct) CanCreateDirectories(canCreateDirectories bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-canselecthiddenextension","title":"func (*OpenFileDialogStruct) CanSelectHiddenExtension","text":"<pre><code>func (d *OpenFileDialogStruct) CanSelectHiddenExtension(canSelectHiddenExtension bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-hideextension","title":"func (*OpenFileDialogStruct) HideExtension","text":"<pre><code>func (d *OpenFileDialogStruct) HideExtension(hideExtension bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-promptformultipleselection","title":"func (*OpenFileDialogStruct) PromptForMultipleSelection","text":"<pre><code>func (d *OpenFileDialogStruct) PromptForMultipleSelection() ([]string, error)\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-promptforsingleselection","title":"func (*OpenFileDialogStruct) PromptForSingleSelection","text":"<pre><code>func (d *OpenFileDialogStruct) PromptForSingleSelection() (string, error)\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-resolvesaliases","title":"func (*OpenFileDialogStruct) ResolvesAliases","text":"<pre><code>func (d *OpenFileDialogStruct) ResolvesAliases(resolvesAliases bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-setbuttontext","title":"func (*OpenFileDialogStruct) SetButtonText","text":"<pre><code>func (d *OpenFileDialogStruct) SetButtonText(text string) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-setdirectory","title":"func (*OpenFileDialogStruct) SetDirectory","text":"<pre><code>func (d *OpenFileDialogStruct) SetDirectory(directory string) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-setmessage","title":"func (*OpenFileDialogStruct) SetMessage","text":"<pre><code>func (d *OpenFileDialogStruct) SetMessage(message string) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-setoptions","title":"func (*OpenFileDialogStruct) SetOptions","text":"<pre><code>func (d *OpenFileDialogStruct) SetOptions(options *OpenFileDialogOptions)\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-settitle","title":"func (*OpenFileDialogStruct) SetTitle","text":"<pre><code>func (d *OpenFileDialogStruct) SetTitle(title string) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-showhiddenfiles","title":"func (*OpenFileDialogStruct) ShowHiddenFiles","text":"<pre><code>func (d *OpenFileDialogStruct) ShowHiddenFiles(showHiddenFiles bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-openfiledialogstruct-treatsfilepackagesasdirectories","title":"func (*OpenFileDialogStruct) TreatsFilePackagesAsDirectories","text":"<pre><code>func (d *OpenFileDialogStruct) TreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories bool) *OpenFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#type-options","title":"type Options","text":"<pre><code>type Options struct {\n// Name is the name of the application\nName string\n// Description is the description of the application (used in the default about box)\nDescription string\n// Icon is the icon of the application (used in the default about box)\nIcon []byte\n// Mac is the Mac specific configuration for Mac builds\nMac MacOptions\n// Windows is the Windows specific configuration for Windows builds\nWindows WindowsOptions\n// Bind allows you to bind Go methods to the frontend.\nBind []any\n// BindAliases allows you to specify alias IDs for your bound methods.\n// Example: `BindAliases: map[uint32]uint32{1: 1411160069}` states that alias ID 1 maps to the Go method with ID 1411160069.\nBindAliases map[uint32]uint32\n// Logger i a slog.Logger instance used for logging Wails system messages (not application messages).\n// If not defined, a default logger is used.\nLogger *slog.Logger\n// LogLevel defines the log level of the Wails system logger.\nLogLevel slog.Level\n// Assets are the application assets to be used.\nAssets AssetOptions\n// Plugins is a map of plugins used by the application\nPlugins map[string]Plugin\n// Flags are key value pairs that are available to the frontend.\n// This is also used by Wails to provide information to the frontend.\nFlags map[string]any\n// PanicHandler is a way to register a custom panic handler\nPanicHandler func(any)\n// KeyBindings is a map of key bindings to functions\nKeyBindings map[string]func(window *WebviewWindow)\n}\n</code></pre>"},{"location":"API/fullapi/#type-parameter","title":"type Parameter","text":"<p>Parameter defines a Go method parameter</p> <pre><code>type Parameter struct {\nName        string `json:\"name,omitempty\"`\nTypeName    string `json:\"type\"`\nReflectType reflect.Type\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#func-parameter-iserror","title":"func (*Parameter) IsError","text":"<pre><code>func (p *Parameter) IsError() bool\n</code></pre> <p>IsError returns true if the parameter type is an error</p> <p></p>"},{"location":"API/fullapi/#func-parameter-istype","title":"func (*Parameter) IsType","text":"<pre><code>func (p *Parameter) IsType(typename string) bool\n</code></pre> <p>IsType returns true if the given</p> <p></p>"},{"location":"API/fullapi/#type-plugin","title":"type Plugin","text":"<pre><code>type Plugin interface {\nName() string\nInit() error\nShutdown()\nCallableByJS() []string\nInjectJS() string\n}\n</code></pre>"},{"location":"API/fullapi/#type-plugincalloptions","title":"type PluginCallOptions","text":"<pre><code>type PluginCallOptions struct {\nName string `json:\"name\"`\nArgs []any  `json:\"args\"`\n}\n</code></pre>"},{"location":"API/fullapi/#type-pluginmanager","title":"type PluginManager","text":"<pre><code>type PluginManager struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newpluginmanager","title":"func NewPluginManager","text":"<pre><code>func NewPluginManager(plugins map[string]Plugin, assetServer *assetserver.AssetServer) *PluginManager\n</code></pre>"},{"location":"API/fullapi/#func-pluginmanager-init","title":"func (*PluginManager) Init","text":"<pre><code>func (p *PluginManager) Init() error\n</code></pre>"},{"location":"API/fullapi/#func-pluginmanager-shutdown","title":"func (*PluginManager) Shutdown","text":"<pre><code>func (p *PluginManager) Shutdown()\n</code></pre>"},{"location":"API/fullapi/#type-positionoptions","title":"type PositionOptions","text":"<pre><code>type PositionOptions struct {\nBuffer int\n}\n</code></pre>"},{"location":"API/fullapi/#type-queryparams","title":"type QueryParams","text":"<pre><code>type QueryParams map[string][]string\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-args","title":"func (QueryParams) Args","text":"<pre><code>func (qp QueryParams) Args() (*Args, error)\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-bool","title":"func (QueryParams) Bool","text":"<pre><code>func (qp QueryParams) Bool(key string) *bool\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-float64","title":"func (QueryParams) Float64","text":"<pre><code>func (qp QueryParams) Float64(key string) *float64\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-int","title":"func (QueryParams) Int","text":"<pre><code>func (qp QueryParams) Int(key string) *int\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-string","title":"func (QueryParams) String","text":"<pre><code>func (qp QueryParams) String(key string) *string\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-tostruct","title":"func (QueryParams) ToStruct","text":"<pre><code>func (qp QueryParams) ToStruct(str any) error\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-uint","title":"func (QueryParams) UInt","text":"<pre><code>func (qp QueryParams) UInt(key string) *uint\n</code></pre>"},{"location":"API/fullapi/#func-queryparams-uint8","title":"func (QueryParams) UInt8","text":"<pre><code>func (qp QueryParams) UInt8(key string) *uint8\n</code></pre>"},{"location":"API/fullapi/#type-rgba","title":"type RGBA","text":"<pre><code>type RGBA struct {\nRed, Green, Blue, Alpha uint8\n}\n</code></pre>"},{"location":"API/fullapi/#type-radiogroup","title":"type RadioGroup","text":"<pre><code>type RadioGroup []*RadioGroupMember\n</code></pre>"},{"location":"API/fullapi/#func-radiogroup-add","title":"func (*RadioGroup) Add","text":"<pre><code>func (r *RadioGroup) Add(id int, item *MenuItem)\n</code></pre>"},{"location":"API/fullapi/#func-radiogroup-bounds","title":"func (*RadioGroup) Bounds","text":"<pre><code>func (r *RadioGroup) Bounds() (int, int)\n</code></pre>"},{"location":"API/fullapi/#func-radiogroup-menuid","title":"func (*RadioGroup) MenuID","text":"<pre><code>func (r *RadioGroup) MenuID(item *MenuItem) int\n</code></pre>"},{"location":"API/fullapi/#type-radiogroupmember","title":"type RadioGroupMember","text":"<pre><code>type RadioGroupMember struct {\nID       int\nMenuItem *MenuItem\n}\n</code></pre>"},{"location":"API/fullapi/#type-rect","title":"type Rect","text":"<pre><code>type Rect struct {\nX      int\nY      int\nWidth  int\nHeight int\n}\n</code></pre>"},{"location":"API/fullapi/#type-role","title":"type Role","text":"<p>Role is a type to identify menu roles</p> <pre><code>type Role uint\n</code></pre> <p>These constants need to be kept in sync with `v2/internal/frontend/desktop/darwin/Role.h`</p> <pre><code>const (\nNoRole       Role = iota\nAppMenu      Role = iota\nEditMenu     Role = iota\nViewMenu     Role = iota\nWindowMenu   Role = iota\nServicesMenu Role = iota\nHelpMenu     Role = iota\nHide               Role = iota\nHideOthers         Role = iota\nUnHide             Role = iota\nAbout              Role = iota\nUndo               Role = iota\nRedo               Role = iota\nCut                Role = iota\nCopy               Role = iota\nPaste              Role = iota\nPasteAndMatchStyle Role = iota\nSelectAll          Role = iota\nDelete             Role = iota\nSpeechMenu         Role = iota\nQuit               Role = iota\nFileMenu           Role = iota\nClose              Role = iota\nReload             Role = iota\nForceReload        Role = iota\nToggleDevTools     Role = iota\nResetZoom          Role = iota\nZoomIn             Role = iota\nZoomOut            Role = iota\nToggleFullscreen   Role = iota\nMinimize   Role = iota\nZoom       Role = iota\nFullScreen Role = iota\n)\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-savefiledialogoptions","title":"type SaveFileDialogOptions","text":"<pre><code>type SaveFileDialogOptions struct {\nCanCreateDirectories            bool\nShowHiddenFiles                 bool\nCanSelectHiddenExtension        bool\nAllowOtherFileTypes             bool\nHideExtension                   bool\nTreatsFilePackagesAsDirectories bool\nTitle                           string\nMessage                         string\nDirectory                       string\nFilename                        string\nButtonText                      string\nFilters                         []FileFilter\nWindow                          *WebviewWindow\n}\n</code></pre>"},{"location":"API/fullapi/#type-savefiledialogstruct","title":"type SaveFileDialogStruct","text":"<pre><code>type SaveFileDialogStruct struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialog","title":"func SaveFileDialog","text":"<pre><code>func SaveFileDialog() *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogwithoptions","title":"func SaveFileDialogWithOptions","text":"<pre><code>func SaveFileDialogWithOptions(s *SaveFileDialogOptions) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-addfilter","title":"func (*SaveFileDialogStruct) AddFilter","text":"<pre><code>func (d *SaveFileDialogStruct) AddFilter(displayName, pattern string) *SaveFileDialogStruct\n</code></pre> <p>AddFilter adds a filter to the dialog. The filter is a display name and a semicolon separated list of extensions. EG: AddFilter(\"Image Files\", \"*.jpg;*.png\")</p> <p></p>"},{"location":"API/fullapi/#func-savefiledialogstruct-allowsotherfiletypes","title":"func (*SaveFileDialogStruct) AllowsOtherFileTypes","text":"<pre><code>func (d *SaveFileDialogStruct) AllowsOtherFileTypes(allowOtherFileTypes bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-attachtowindow","title":"func (*SaveFileDialogStruct) AttachToWindow","text":"<pre><code>func (d *SaveFileDialogStruct) AttachToWindow(window *WebviewWindow) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-cancreatedirectories","title":"func (*SaveFileDialogStruct) CanCreateDirectories","text":"<pre><code>func (d *SaveFileDialogStruct) CanCreateDirectories(canCreateDirectories bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-canselecthiddenextension","title":"func (*SaveFileDialogStruct) CanSelectHiddenExtension","text":"<pre><code>func (d *SaveFileDialogStruct) CanSelectHiddenExtension(canSelectHiddenExtension bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-hideextension","title":"func (*SaveFileDialogStruct) HideExtension","text":"<pre><code>func (d *SaveFileDialogStruct) HideExtension(hideExtension bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-promptforsingleselection","title":"func (*SaveFileDialogStruct) PromptForSingleSelection","text":"<pre><code>func (d *SaveFileDialogStruct) PromptForSingleSelection() (string, error)\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-setbuttontext","title":"func (*SaveFileDialogStruct) SetButtonText","text":"<pre><code>func (d *SaveFileDialogStruct) SetButtonText(text string) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-setdirectory","title":"func (*SaveFileDialogStruct) SetDirectory","text":"<pre><code>func (d *SaveFileDialogStruct) SetDirectory(directory string) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-setfilename","title":"func (*SaveFileDialogStruct) SetFilename","text":"<pre><code>func (d *SaveFileDialogStruct) SetFilename(filename string) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-setmessage","title":"func (*SaveFileDialogStruct) SetMessage","text":"<pre><code>func (d *SaveFileDialogStruct) SetMessage(message string) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-setoptions","title":"func (*SaveFileDialogStruct) SetOptions","text":"<pre><code>func (d *SaveFileDialogStruct) SetOptions(options *SaveFileDialogOptions)\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-showhiddenfiles","title":"func (*SaveFileDialogStruct) ShowHiddenFiles","text":"<pre><code>func (d *SaveFileDialogStruct) ShowHiddenFiles(showHiddenFiles bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#func-savefiledialogstruct-treatsfilepackagesasdirectories","title":"func (*SaveFileDialogStruct) TreatsFilePackagesAsDirectories","text":"<pre><code>func (d *SaveFileDialogStruct) TreatsFilePackagesAsDirectories(treatsFilePackagesAsDirectories bool) *SaveFileDialogStruct\n</code></pre>"},{"location":"API/fullapi/#type-screen","title":"type Screen","text":"<pre><code>type Screen struct {\nID        string  // A unique identifier for the display\nName      string  // The name of the display\nScale     float32 // The scale factor of the display\nX         int     // The x-coordinate of the top-left corner of the rectangle\nY         int     // The y-coordinate of the top-left corner of the rectangle\nSize      Size    // The size of the display\nBounds    Rect    // The bounds of the display\nWorkArea  Rect    // The work area of the display\nIsPrimary bool    // Whether this is the primary display\nRotation  float32 // The rotation of the display\n}\n</code></pre>"},{"location":"API/fullapi/#type-size","title":"type Size","text":"<pre><code>type Size struct {\nWidth  int\nHeight int\n}\n</code></pre>"},{"location":"API/fullapi/#type-systemtray","title":"type SystemTray","text":"<pre><code>type SystemTray struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-attachwindow","title":"func (*SystemTray) AttachWindow","text":"<pre><code>func (s *SystemTray) AttachWindow(window *WebviewWindow) *SystemTray\n</code></pre> <p>AttachWindow attaches a window to the system tray. The window will be shown when the system tray icon is clicked. The window will be hidden when the system tray icon is clicked again, or when the window loses focus.</p> <p></p>"},{"location":"API/fullapi/#func-systemtray-destroy","title":"func (*SystemTray) Destroy","text":"<pre><code>func (s *SystemTray) Destroy()\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-label","title":"func (*SystemTray) Label","text":"<pre><code>func (s *SystemTray) Label() string\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-onclick","title":"func (*SystemTray) OnClick","text":"<pre><code>func (s *SystemTray) OnClick(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-ondoubleclick","title":"func (*SystemTray) OnDoubleClick","text":"<pre><code>func (s *SystemTray) OnDoubleClick(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-onmouseenter","title":"func (*SystemTray) OnMouseEnter","text":"<pre><code>func (s *SystemTray) OnMouseEnter(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-onmouseleave","title":"func (*SystemTray) OnMouseLeave","text":"<pre><code>func (s *SystemTray) OnMouseLeave(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-onrightclick","title":"func (*SystemTray) OnRightClick","text":"<pre><code>func (s *SystemTray) OnRightClick(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-onrightdoubleclick","title":"func (*SystemTray) OnRightDoubleClick","text":"<pre><code>func (s *SystemTray) OnRightDoubleClick(handler func()) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-openmenu","title":"func (*SystemTray) OpenMenu","text":"<pre><code>func (s *SystemTray) OpenMenu()\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-positionwindow","title":"func (*SystemTray) PositionWindow","text":"<pre><code>func (s *SystemTray) PositionWindow(window *WebviewWindow, offset int) error\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-setdarkmodeicon","title":"func (*SystemTray) SetDarkModeIcon","text":"<pre><code>func (s *SystemTray) SetDarkModeIcon(icon []byte) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-seticon","title":"func (*SystemTray) SetIcon","text":"<pre><code>func (s *SystemTray) SetIcon(icon []byte) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-seticonposition","title":"func (*SystemTray) SetIconPosition","text":"<pre><code>func (s *SystemTray) SetIconPosition(iconPosition int) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-setlabel","title":"func (*SystemTray) SetLabel","text":"<pre><code>func (s *SystemTray) SetLabel(label string)\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-setmenu","title":"func (*SystemTray) SetMenu","text":"<pre><code>func (s *SystemTray) SetMenu(menu *Menu) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-settemplateicon","title":"func (*SystemTray) SetTemplateIcon","text":"<pre><code>func (s *SystemTray) SetTemplateIcon(icon []byte) *SystemTray\n</code></pre>"},{"location":"API/fullapi/#func-systemtray-windowdebounce","title":"func (*SystemTray) WindowDebounce","text":"<pre><code>func (s *SystemTray) WindowDebounce(debounce time.Duration) *SystemTray\n</code></pre> <p>WindowDebounce is used by Windows to indicate how long to wait before responding to a mouse up event on the notification icon. This prevents the window from being hidden and then immediately shown when the user clicks on the system tray icon. See https://stackoverflow.com/questions/4585283/alternate-showing-hiding-window-when-notify-icon-is-clicked</p> <p></p>"},{"location":"API/fullapi/#func-systemtray-windowoffset","title":"func (*SystemTray) WindowOffset","text":"<pre><code>func (s *SystemTray) WindowOffset(offset int) *SystemTray\n</code></pre> <p>WindowOffset sets the gap in pixels between the system tray and the window</p> <p></p>"},{"location":"API/fullapi/#type-theme","title":"type Theme","text":"<pre><code>type Theme int\n</code></pre> <pre><code>const (\n// SystemDefault will use whatever the system theme is. The application will follow system theme changes.\nSystemDefault Theme = 0\n// Dark Mode\nDark Theme = 1\n// Light Mode\nLight Theme = 2\n)\n</code></pre>"},{"location":"API/fullapi/#type-themesettings","title":"type ThemeSettings","text":"<p>ThemeSettings defines custom colours to use in dark or light mode. They may be set using the hex values: 0x00BBGGRR</p> <pre><code>type ThemeSettings struct {\nDarkModeTitleBar           int32\nDarkModeTitleBarInactive   int32\nDarkModeTitleText          int32\nDarkModeTitleTextInactive  int32\nDarkModeBorder             int32\nDarkModeBorderInactive     int32\nLightModeTitleBar          int32\nLightModeTitleBarInactive  int32\nLightModeTitleText         int32\nLightModeTitleTextInactive int32\nLightModeBorder            int32\nLightModeBorderInactive    int32\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-wailsevent","title":"type WailsEvent","text":"<pre><code>type WailsEvent struct {\nName      string `json:\"name\"`\nData      any    `json:\"data\"`\nSender    string `json:\"sender\"`\nCancelled bool\n}\n</code></pre>"},{"location":"API/fullapi/#func-wailsevent-cancel","title":"func (*WailsEvent) Cancel","text":"<pre><code>func (e *WailsEvent) Cancel()\n</code></pre>"},{"location":"API/fullapi/#type-webviewwindow","title":"type WebviewWindow","text":"<pre><code>type WebviewWindow struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-absoluteposition","title":"func (*WebviewWindow) AbsolutePosition","text":"<pre><code>func (w *WebviewWindow) AbsolutePosition() (int, int)\n</code></pre> <p>AbsolutePosition returns the absolute position of the window to the screen</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-center","title":"func (*WebviewWindow) Center","text":"<pre><code>func (w *WebviewWindow) Center()\n</code></pre> <p>Center centers the window on the screen</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-close","title":"func (*WebviewWindow) Close","text":"<pre><code>func (w *WebviewWindow) Close()\n</code></pre> <p>Close closes the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-destroy","title":"func (*WebviewWindow) Destroy","text":"<pre><code>func (w *WebviewWindow) Destroy()\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-execjs","title":"func (*WebviewWindow) ExecJS","text":"<pre><code>func (w *WebviewWindow) ExecJS(js string)\n</code></pre> <p>ExecJS executes the given javascript in the context of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-flash","title":"func (*WebviewWindow) Flash","text":"<pre><code>func (w *WebviewWindow) Flash(enabled bool)\n</code></pre> <p>Flash flashes the window's taskbar button/icon. Windows only.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-focus","title":"func (*WebviewWindow) Focus","text":"<pre><code>func (w *WebviewWindow) Focus()\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-forcereload","title":"func (*WebviewWindow) ForceReload","text":"<pre><code>func (w *WebviewWindow) ForceReload()\n</code></pre> <p>ForceReload forces the window to reload the page assets</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-fullscreen","title":"func (*WebviewWindow) Fullscreen","text":"<pre><code>func (w *WebviewWindow) Fullscreen() *WebviewWindow\n</code></pre> <p>Fullscreen sets the window to fullscreen mode. Min/Max size constraints are disabled.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-getscreen","title":"func (*WebviewWindow) GetScreen","text":"<pre><code>func (w *WebviewWindow) GetScreen() (*Screen, error)\n</code></pre> <p>GetScreen returns the screen that the window is on</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-getzoom","title":"func (*WebviewWindow) GetZoom","text":"<pre><code>func (w *WebviewWindow) GetZoom() float64\n</code></pre> <p>GetZoom returns the current zoom level of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-height","title":"func (*WebviewWindow) Height","text":"<pre><code>func (w *WebviewWindow) Height() int\n</code></pre> <p>Height returns the height of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-hide","title":"func (*WebviewWindow) Hide","text":"<pre><code>func (w *WebviewWindow) Hide() *WebviewWindow\n</code></pre> <p>Hide hides the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-isfocused","title":"func (*WebviewWindow) IsFocused","text":"<pre><code>func (w *WebviewWindow) IsFocused() bool\n</code></pre> <p>IsFocused returns true if the window is currently focused</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-isfullscreen","title":"func (*WebviewWindow) IsFullscreen","text":"<pre><code>func (w *WebviewWindow) IsFullscreen() bool\n</code></pre> <p>IsFullscreen returns true if the window is fullscreen</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-ismaximised","title":"func (*WebviewWindow) IsMaximised","text":"<pre><code>func (w *WebviewWindow) IsMaximised() bool\n</code></pre> <p>IsMaximised returns true if the window is maximised</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-isminimised","title":"func (*WebviewWindow) IsMinimised","text":"<pre><code>func (w *WebviewWindow) IsMinimised() bool\n</code></pre> <p>IsMinimised returns true if the window is minimised</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-isvisible","title":"func (*WebviewWindow) IsVisible","text":"<pre><code>func (w *WebviewWindow) IsVisible() bool\n</code></pre> <p>IsVisible returns true if the window is visible</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-maximise","title":"func (*WebviewWindow) Maximise","text":"<pre><code>func (w *WebviewWindow) Maximise() *WebviewWindow\n</code></pre> <p>Maximise maximises the window. Min/Max size constraints are disabled.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-minimise","title":"func (*WebviewWindow) Minimise","text":"<pre><code>func (w *WebviewWindow) Minimise() *WebviewWindow\n</code></pre> <p>Minimise minimises the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-name","title":"func (*WebviewWindow) Name","text":"<pre><code>func (w *WebviewWindow) Name() string\n</code></pre> <p>Name returns the name of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-nativewindowhandle","title":"func (*WebviewWindow) NativeWindowHandle","text":"<pre><code>func (w *WebviewWindow) NativeWindowHandle() (uintptr, error)\n</code></pre> <p>NativeWindowHandle returns the platform native window handle for the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-on","title":"func (*WebviewWindow) On","text":"<pre><code>func (w *WebviewWindow) On(eventType events.WindowEventType, callback func(event *WindowEvent)) func()\n</code></pre> <p>On registers a callback for the given window event</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-print","title":"func (*WebviewWindow) Print","text":"<pre><code>func (w *WebviewWindow) Print() error\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-registercontextmenu","title":"func (*WebviewWindow) RegisterContextMenu","text":"<pre><code>func (w *WebviewWindow) RegisterContextMenu(name string, menu *Menu)\n</code></pre> <p>RegisterContextMenu registers a context menu and assigns it the given name.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-registerhook","title":"func (*WebviewWindow) RegisterHook","text":"<pre><code>func (w *WebviewWindow) RegisterHook(eventType events.WindowEventType, callback func(event *WindowEvent)) func()\n</code></pre> <p>RegisterHook registers a hook for the given window event</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-relativeposition","title":"func (*WebviewWindow) RelativePosition","text":"<pre><code>func (w *WebviewWindow) RelativePosition() (int, int)\n</code></pre> <p>RelativePosition returns the relative position of the window to the screen</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-reload","title":"func (*WebviewWindow) Reload","text":"<pre><code>func (w *WebviewWindow) Reload()\n</code></pre> <p>Reload reloads the page assets</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-resizable","title":"func (*WebviewWindow) Resizable","text":"<pre><code>func (w *WebviewWindow) Resizable() bool\n</code></pre> <p>Resizable returns true if the window is resizable.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-restore","title":"func (*WebviewWindow) Restore","text":"<pre><code>func (w *WebviewWindow) Restore()\n</code></pre> <p>Restore restores the window to its previous state if it was previously minimised, maximised or fullscreen.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setabsoluteposition","title":"func (*WebviewWindow) SetAbsolutePosition","text":"<pre><code>func (w *WebviewWindow) SetAbsolutePosition(x int, y int)\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-setalwaysontop","title":"func (*WebviewWindow) SetAlwaysOnTop","text":"<pre><code>func (w *WebviewWindow) SetAlwaysOnTop(b bool) *WebviewWindow\n</code></pre> <p>SetAlwaysOnTop sets the window to be always on top.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setbackgroundcolour","title":"func (*WebviewWindow) SetBackgroundColour","text":"<pre><code>func (w *WebviewWindow) SetBackgroundColour(colour RGBA) *WebviewWindow\n</code></pre> <p>SetBackgroundColour sets the background colour of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setenabled","title":"func (*WebviewWindow) SetEnabled","text":"<pre><code>func (w *WebviewWindow) SetEnabled(enabled bool)\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-setframeless","title":"func (*WebviewWindow) SetFrameless","text":"<pre><code>func (w *WebviewWindow) SetFrameless(frameless bool) *WebviewWindow\n</code></pre> <p>SetFrameless removes the window frame and title bar</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setfullscreenbuttonenabled","title":"func (*WebviewWindow) SetFullscreenButtonEnabled","text":"<pre><code>func (w *WebviewWindow) SetFullscreenButtonEnabled(enabled bool) *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-sethtml","title":"func (*WebviewWindow) SetHTML","text":"<pre><code>func (w *WebviewWindow) SetHTML(html string) *WebviewWindow\n</code></pre> <p>SetHTML sets the HTML of the window to the given html string.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setmaxsize","title":"func (*WebviewWindow) SetMaxSize","text":"<pre><code>func (w *WebviewWindow) SetMaxSize(maxWidth, maxHeight int) *WebviewWindow\n</code></pre> <p>SetMaxSize sets the maximum size of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setminsize","title":"func (*WebviewWindow) SetMinSize","text":"<pre><code>func (w *WebviewWindow) SetMinSize(minWidth, minHeight int) *WebviewWindow\n</code></pre> <p>SetMinSize sets the minimum size of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setrelativeposition","title":"func (*WebviewWindow) SetRelativePosition","text":"<pre><code>func (w *WebviewWindow) SetRelativePosition(x, y int) *WebviewWindow\n</code></pre> <p>SetRelativePosition sets the position of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setresizable","title":"func (*WebviewWindow) SetResizable","text":"<pre><code>func (w *WebviewWindow) SetResizable(b bool) *WebviewWindow\n</code></pre> <p>SetResizable sets whether the window is resizable.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-setsize","title":"func (*WebviewWindow) SetSize","text":"<pre><code>func (w *WebviewWindow) SetSize(width, height int) *WebviewWindow\n</code></pre> <p>SetSize sets the size of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-settitle","title":"func (*WebviewWindow) SetTitle","text":"<pre><code>func (w *WebviewWindow) SetTitle(title string) *WebviewWindow\n</code></pre> <p>SetTitle sets the title of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-seturl","title":"func (*WebviewWindow) SetURL","text":"<pre><code>func (w *WebviewWindow) SetURL(s string) *WebviewWindow\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-setzoom","title":"func (*WebviewWindow) SetZoom","text":"<pre><code>func (w *WebviewWindow) SetZoom(magnification float64) *WebviewWindow\n</code></pre> <p>SetZoom sets the zoom level of the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-show","title":"func (*WebviewWindow) Show","text":"<pre><code>func (w *WebviewWindow) Show() *WebviewWindow\n</code></pre> <p>Show shows the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-size","title":"func (*WebviewWindow) Size","text":"<pre><code>func (w *WebviewWindow) Size() (int, int)\n</code></pre> <p>Size returns the size of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-toggledevtools","title":"func (*WebviewWindow) ToggleDevTools","text":"<pre><code>func (w *WebviewWindow) ToggleDevTools()\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-togglefullscreen","title":"func (*WebviewWindow) ToggleFullscreen","text":"<pre><code>func (w *WebviewWindow) ToggleFullscreen()\n</code></pre> <p>ToggleFullscreen toggles the window between fullscreen and normal</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-unfullscreen","title":"func (*WebviewWindow) UnFullscreen","text":"<pre><code>func (w *WebviewWindow) UnFullscreen()\n</code></pre> <p>UnFullscreen un-fullscreens the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-unmaximise","title":"func (*WebviewWindow) UnMaximise","text":"<pre><code>func (w *WebviewWindow) UnMaximise()\n</code></pre> <p>UnMaximise un-maximises the window.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-unminimise","title":"func (*WebviewWindow) UnMinimise","text":"<pre><code>func (w *WebviewWindow) UnMinimise()\n</code></pre> <p>UnMinimise un-minimises the window. Min/Max size constraints are re-enabled.</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-width","title":"func (*WebviewWindow) Width","text":"<pre><code>func (w *WebviewWindow) Width() int\n</code></pre> <p>Width returns the width of the window</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-zoom","title":"func (*WebviewWindow) Zoom","text":"<pre><code>func (w *WebviewWindow) Zoom()\n</code></pre>"},{"location":"API/fullapi/#func-webviewwindow-zoomin","title":"func (*WebviewWindow) ZoomIn","text":"<pre><code>func (w *WebviewWindow) ZoomIn()\n</code></pre> <p>ZoomIn increases the zoom level of the webview content</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-zoomout","title":"func (*WebviewWindow) ZoomOut","text":"<pre><code>func (w *WebviewWindow) ZoomOut()\n</code></pre> <p>ZoomOut decreases the zoom level of the webview content</p> <p></p>"},{"location":"API/fullapi/#func-webviewwindow-zoomreset","title":"func (*WebviewWindow) ZoomReset","text":"<pre><code>func (w *WebviewWindow) ZoomReset() *WebviewWindow\n</code></pre> <p>ZoomReset resets the zoom level of the webview content to 100%</p> <p></p>"},{"location":"API/fullapi/#type-webviewwindowoptions","title":"type WebviewWindowOptions","text":"<pre><code>type WebviewWindowOptions struct {\n// Name is a unique identifier that can be given to a window.\nName string\n// Title is the title of the window.\nTitle string\n// Width is the starting width of the window.\nWidth int\n// Height is the starting height of the window.\nHeight int\n// AlwaysOnTop will make the window float above other windows.\nAlwaysOnTop bool\n// URL is the URL to load in the window.\nURL string\n// DisableResize will disable the ability to resize the window.\nDisableResize bool\n// Frameless will remove the window frame.\nFrameless bool\n// MinWidth is the minimum width of the window.\nMinWidth int\n// MinHeight is the minimum height of the window.\nMinHeight int\n// MaxWidth is the maximum width of the window.\nMaxWidth int\n// MaxHeight is the maximum height of the window.\nMaxHeight int\n// StartState indicates the state of the window when it is first shown.\n// Default: WindowStateNormal\nStartState WindowState\n// Centered will center the window on the screen.\nCentered bool\n// BackgroundType is the type of background to use for the window.\n// Default: BackgroundTypeSolid\nBackgroundType BackgroundType\n// BackgroundColour is the colour to use for the window background.\nBackgroundColour RGBA\n// HTML is the HTML to load in the window.\nHTML string\n// JS is the JavaScript to load in the window.\nJS  string\n// CSS is the CSS to load in the window.\nCSS string\n// X is the starting X position of the window.\nX   int\n// Y is the starting Y position of the window.\nY   int\n// TransparentTitlebar will make the titlebar transparent.\n// TODO: Move to mac window options\nFullscreenButtonEnabled bool\n// Hidden will hide the window when it is first created.\nHidden bool\n// Zoom is the zoom level of the window.\nZoom float64\n// ZoomControlEnabled will enable the zoom control.\nZoomControlEnabled bool\n// EnableDragAndDrop will enable drag and drop.\nEnableDragAndDrop bool\n// OpenInspectorOnStartup will open the inspector when the window is first shown.\nOpenInspectorOnStartup bool\n// Mac options\nMac MacWindow\n// Windows options\nWindows WindowsWindow\n// Focused indicates the window should be focused when initially shown\nFocused bool\n// ShouldClose is called when the window is about to close.\n// Return true to allow the window to close, or false to prevent it from closing.\nShouldClose func(window *WebviewWindow) bool\n// If true, the window's devtools will be available (default true in builds without the `production` build tag)\nDevToolsEnabled bool\n// If true, the window's default context menu will be disabled (default false)\nDefaultContextMenuDisabled bool\n// KeyBindings is a map of key bindings to functions\nKeyBindings map[string]func(window *WebviewWindow)\n}\n</code></pre>"},{"location":"API/fullapi/#type-win32menu","title":"type Win32Menu","text":"<pre><code>type Win32Menu struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newapplicationmenu","title":"func NewApplicationMenu","text":"<pre><code>func NewApplicationMenu(parent w32.HWND, inputMenu *Menu) *Win32Menu\n</code></pre>"},{"location":"API/fullapi/#func-newpopupmenu","title":"func NewPopupMenu","text":"<pre><code>func NewPopupMenu(parent w32.HWND, inputMenu *Menu) *Win32Menu\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-destroy","title":"func (*Win32Menu) Destroy","text":"<pre><code>func (p *Win32Menu) Destroy()\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-onmenuclose","title":"func (*Win32Menu) OnMenuClose","text":"<pre><code>func (p *Win32Menu) OnMenuClose(fn func())\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-onmenuopen","title":"func (*Win32Menu) OnMenuOpen","text":"<pre><code>func (p *Win32Menu) OnMenuOpen(fn func())\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-processcommand","title":"func (*Win32Menu) ProcessCommand","text":"<pre><code>func (p *Win32Menu) ProcessCommand(cmdMsgID int) bool\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-showat","title":"func (*Win32Menu) ShowAt","text":"<pre><code>func (p *Win32Menu) ShowAt(x int, y int)\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-showatcursor","title":"func (*Win32Menu) ShowAtCursor","text":"<pre><code>func (p *Win32Menu) ShowAtCursor()\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-update","title":"func (*Win32Menu) Update","text":"<pre><code>func (p *Win32Menu) Update()\n</code></pre>"},{"location":"API/fullapi/#func-win32menu-updatemenuitem","title":"func (*Win32Menu) UpdateMenuItem","text":"<pre><code>func (p *Win32Menu) UpdateMenuItem(item *MenuItem)\n</code></pre>"},{"location":"API/fullapi/#type-windowattachconfig","title":"type WindowAttachConfig","text":"<pre><code>type WindowAttachConfig struct {\n// Window is the window to attach to the system tray. If it's null, the request to attach will be ignored.\nWindow *WebviewWindow\n// Offset indicates the gap in pixels between the system tray and the window\nOffset int\n// Debounce is used by Windows to indicate how long to wait before responding to a mouse\n// up event on the notification icon. See https://stackoverflow.com/questions/4585283/alternate-showing-hiding-window-when-notify-icon-is-clicked\nDebounce time.Duration\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#type-windowevent","title":"type WindowEvent","text":"<pre><code>type WindowEvent struct {\nCancelled bool\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-newwindowevent","title":"func NewWindowEvent","text":"<pre><code>func NewWindowEvent() *WindowEvent\n</code></pre>"},{"location":"API/fullapi/#func-windowevent-cancel","title":"func (*WindowEvent) Cancel","text":"<pre><code>func (w *WindowEvent) Cancel()\n</code></pre>"},{"location":"API/fullapi/#func-windowevent-context","title":"func (*WindowEvent) Context","text":"<pre><code>func (w *WindowEvent) Context() *WindowEventContext\n</code></pre>"},{"location":"API/fullapi/#type-windoweventcontext","title":"type WindowEventContext","text":"<pre><code>type WindowEventContext struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#func-windoweventcontext-droppedfiles","title":"func (WindowEventContext) DroppedFiles","text":"<pre><code>func (c WindowEventContext) DroppedFiles() []string\n</code></pre>"},{"location":"API/fullapi/#type-windoweventlistener","title":"type WindowEventListener","text":"<pre><code>type WindowEventListener struct {\n// contains filtered or unexported fields\n}\n</code></pre>"},{"location":"API/fullapi/#type-windowstate","title":"type WindowState","text":"<pre><code>type WindowState int\n</code></pre> <pre><code>const (\nWindowStateNormal WindowState = iota\nWindowStateMinimised\nWindowStateMaximised\nWindowStateFullscreen\n)\n</code></pre>"},{"location":"API/fullapi/#type-windowsoptions","title":"type WindowsOptions","text":"<p>WindowsOptions contains options for Windows applications.</p> <pre><code>type WindowsOptions struct {\n// WndProcInterceptor is a function that will be called for every message sent in the application.\n// Use this to hook into the main message loop. This is useful for handling custom window messages.\n// If `shouldReturn` is `true` then `returnCode` will be returned by the main message loop.\n// If `shouldReturn` is `false` then returnCode will be ignored and the message will be processed by the main message loop.\nWndProcInterceptor func(hwnd uintptr, msg uint32, wParam, lParam uintptr) (returnCode uintptr, shouldReturn bool)\n// DisableQuitOnLastWindowClosed disables the auto quit of the application if the last window has been closed.\nDisableQuitOnLastWindowClosed bool\n// Path where the WebView2 stores the user data. If empty %APPDATA%\\[BinaryName.exe] will be used.\n// If the path is not valid, a messagebox will be displayed with the error and the app will exit with error code.\nWebviewUserDataPath string\n// Path to the directory with WebView2 executables. If empty WebView2 installed in the system will be used.\nWebviewBrowserPath string\n}\n</code></pre> <p></p>"},{"location":"API/fullapi/#type-windowswindow","title":"type WindowsWindow","text":"<pre><code>type WindowsWindow struct {\n// Select the type of translucent backdrop. Requires Windows 11 22621 or later.\n// Only used when window's `BackgroundType` is set to `BackgroundTypeTranslucent`.\n// Default: Auto\nBackdropType BackdropType\n// Disable the icon in the titlebar\n// Default: false\nDisableIcon bool\n// Theme (Dark / Light / SystemDefault)\n// Default: SystemDefault - The application will follow system theme changes.\nTheme Theme\n// Specify custom colours to use for dark/light mode\n// Default: nil\nCustomTheme *ThemeSettings\n// Disable all window decorations in Frameless mode, which means no \"Aero Shadow\" and no \"Rounded Corner\" will be shown.\n// \"Rounded Corners\" are only available on Windows 11.\n// Default: false\nDisableFramelessWindowDecorations bool\n// WindowMask is used to set the window shape. Use a PNG with an alpha channel to create a custom shape.\n// Default: nil\nWindowMask []byte\n// WindowMaskDraggable is used to make the window draggable by clicking on the window mask.\n// Default: false\nWindowMaskDraggable bool\n// WebviewGpuIsDisabled is used to enable / disable GPU acceleration for the webview\n// Default: false\nWebviewGpuIsDisabled bool\n// ResizeDebounceMS is the amount of time to debounce redraws of webview2\n// when resizing the window\n// Default: 0\nResizeDebounceMS uint16\n// Disable the menu bar for this window\n// Default: false\nDisableMenu bool\n// Event mapping for the window. This allows you to define a translation from one event to another.\n// Default: nil\nEventMapping map[events.WindowEventType]events.WindowEventType\n// HiddenOnTaskbar hides the window from the taskbar\n// Default: false\nHiddenOnTaskbar bool\n// EnableSwipeGestures enables swipe gestures for the window\n// Default: false\nEnableSwipeGestures bool\n// EnableFraudulentWebsiteWarnings will enable warnings for fraudulent websites.\n// Default: false\nEnableFraudulentWebsiteWarnings bool\n// Menu is the menu to use for the window.\nMenu *Menu\n}\n</code></pre>"},{"location":"API/mainthread/","title":"Main Thread Functions","text":"<p>These methods are utility functions to run code on the main thread. This is required when you want to run custom code on the UI thread.</p>"},{"location":"API/mainthread/#invokesync","title":"InvokeSync","text":"<p>API: <code>InvokeSync(fn func())</code></p> <p>This function runs the passed function (<code>fn</code>) synchronously. It uses a WaitGroup (<code>wg</code>) to ensure that the main thread waits for the <code>fn</code> function to finish before it continues. If a panic occurs inside <code>fn</code>, it will be passed to the handler function <code>PanicHandler</code>, defined in the application options.</p>"},{"location":"API/mainthread/#invokesyncwithresult","title":"InvokeSyncWithResult","text":"<p>API: <code>InvokeSyncWithResult[T any](fn func() T) (res T)</code></p> <p>This function works similarly to <code>InvokeSync(fn func())</code>, however, it yields a result. Use this for calling any function with a single return.</p>"},{"location":"API/mainthread/#invokesyncwitherror","title":"InvokeSyncWithError","text":"<p>API: <code>InvokeSyncWithError(fn func() error) (err error)</code></p> <p>This function runs <code>fn</code> synchronously and returns any error that <code>fn</code> produces. Note that this function will recover from a panic if one occurs during <code>fn</code>'s execution.</p>"},{"location":"API/mainthread/#invokesyncwithresultanderror","title":"InvokeSyncWithResultAndError","text":"<p>API: <code>InvokeSyncWithResultAndError[T any](fn func() (T, error)) (res T, err error)</code></p> <p>This function runs <code>fn</code> synchronously and returns both a result of type <code>T</code> and an error.</p>"},{"location":"API/mainthread/#invokeasync","title":"InvokeAsync","text":"<p>API: <code>InvokeAsync(fn func())</code></p> <p>This function runs <code>fn</code> asynchronously. It runs the given function on the main thread. If a panic occurs inside <code>fn</code>, it will be passed to the handler function <code>PanicHandler</code>, defined in the application options.</p> <p>Note: These functions will block execution until <code>fn</code> has finished. It's critical to ensure that <code>fn</code> doesn't block. If you need to run a function that blocks, use <code>InvokeAsync</code> instead.</p>"},{"location":"API/menu/","title":"Menu","text":"<p>Menus can be created and added to the application. They can be used to create context menus, system tray menus and application menus.</p> <p>To create a new menu, call:</p> <pre><code>    // Create a new menu\nmenu := app.NewMenu()\n</code></pre> <p>The following operations are then available on the <code>Menu</code> type:</p>"},{"location":"API/menu/#add","title":"Add","text":"<p>API: <code>Add(label string) *MenuItem</code></p> <p>This method takes a <code>label</code> of type <code>string</code> as an input and adds a new <code>MenuItem</code> with the given label to the menu. It returns the <code>MenuItem</code> added.</p>"},{"location":"API/menu/#addseparator","title":"AddSeparator","text":"<p>API: <code>AddSeparator()</code></p> <p>This method adds a new separator <code>MenuItem</code> to the menu.</p>"},{"location":"API/menu/#addcheckbox","title":"AddCheckbox","text":"<p>API: <code>AddCheckbox(label string, enabled bool) *MenuItem</code></p> <p>This method takes a <code>label</code> of type <code>string</code> and <code>enabled</code> of type <code>bool</code> as inputs and adds a new checkbox <code>MenuItem</code> with the given label and enabled state to the menu. It returns the <code>MenuItem</code> added.</p>"},{"location":"API/menu/#addradio","title":"AddRadio","text":"<p>API: <code>AddRadio(label string, enabled bool) *MenuItem</code></p> <p>This method takes a <code>label</code> of type <code>string</code> and <code>enabled</code> of type <code>bool</code> as inputs and adds a new radio <code>MenuItem</code> with the given label and enabled state to the menu. It returns the <code>MenuItem</code> added.</p>"},{"location":"API/menu/#update","title":"Update","text":"<p>API: <code>Update()</code></p> <p>This method processes any radio groups and updates the menu if a menu implementation is not initialized.</p>"},{"location":"API/menu/#addsubmenu","title":"AddSubmenu","text":"<p>API: <code>AddSubmenu(s string) *Menu</code></p> <p>This method takes a <code>s</code> of type <code>string</code> as input and adds a new submenu <code>MenuItem</code> with the given label to the menu. It returns the submenu added.</p>"},{"location":"API/menu/#addrole","title":"AddRole","text":"<p>API: <code>AddRole(role Role) *Menu</code></p> <p>This method takes <code>role</code> of type <code>Role</code> as input, adds it to the menu if it is not <code>nil</code> and returns the <code>Menu</code>.</p>"},{"location":"API/menu/#setlabel","title":"SetLabel","text":"<p>API: <code>SetLabel(label string)</code></p> <p>This method sets the <code>label</code> of the <code>Menu</code>.</p>"},{"location":"API/systray/","title":"System Tray","text":"<p>The system tray houses notification area on a desktop environment, which can contain both icons of currently-running applications and specific system notifications.</p> <p>You create a system tray by calling <code>app.NewSystemTray()</code>:</p> <pre><code>    // Create a new system tray\ntray := app.NewSystemTray()\n</code></pre> <p>The following methods are available on the <code>SystemTray</code> type:</p>"},{"location":"API/systray/#setlabel","title":"SetLabel","text":"<p>API: <code>SetLabel(label string)</code></p> <p>The <code>SetLabel</code> method sets the tray's label.</p>"},{"location":"API/systray/#label","title":"Label","text":"<p>API: <code>Label() string</code></p> <p>The <code>Label</code> method retrieves the tray's label.</p>"},{"location":"API/systray/#positionwindow","title":"PositionWindow","text":"<p>API: <code>PositionWindow(*WebviewWindow, offset int) error</code></p> <p>The <code>PositionWindow</code> method calls both <code>AttachWindow</code> and <code>WindowOffset</code> methods.</p>"},{"location":"API/systray/#seticon","title":"SetIcon","text":"<p>API: <code>SetIcon(icon []byte) *SystemTray</code></p> <p>The <code>SetIcon</code> method sets the system tray's icon.</p>"},{"location":"API/systray/#setdarkmodeicon","title":"SetDarkModeIcon","text":"<p>API: <code>SetDarkModeIcon(icon []byte) *SystemTray</code></p> <p>The <code>SetDarkModeIcon</code> method sets the system tray's icon when in dark mode.</p>"},{"location":"API/systray/#setmenu","title":"SetMenu","text":"<p>API: <code>SetMenu(menu *Menu) *SystemTray</code></p> <p>The <code>SetMenu</code> method sets the system tray's menu.</p>"},{"location":"API/systray/#destroy","title":"Destroy","text":"<p>API: <code>Destroy()</code></p> <p>The <code>Destroy</code> method destroys the system tray instance.</p>"},{"location":"API/systray/#onclick","title":"OnClick","text":"<p>API: <code>OnClick(handler func()) *SystemTray</code></p> <p>The <code>OnClick</code> method sets the function to execute when the tray icon is clicked.</p>"},{"location":"API/systray/#onrightclick","title":"OnRightClick","text":"<p>API: <code>OnRightClick(handler func()) *SystemTray</code></p> <p>The <code>OnRightClick</code> method sets the function to execute when right-clicking the tray icon.</p>"},{"location":"API/systray/#ondoubleclick","title":"OnDoubleClick","text":"<p>API: <code>OnDoubleClick(handler func()) *SystemTray</code></p> <p>The <code>OnDoubleClick</code> method sets the function to execute when double-clicking the tray icon.</p>"},{"location":"API/systray/#onrightdoubleclick","title":"OnRightDoubleClick","text":"<p>API: <code>OnRightDoubleClick(handler func()) *SystemTray</code></p> <p>The <code>OnRightDoubleClick</code> method sets the function to execute when right double-clicking the tray icon.</p>"},{"location":"API/systray/#attachwindow","title":"AttachWindow","text":"<p>API: <code>AttachWindow(window *WebviewWindow) *SystemTray</code></p> <p>The <code>AttachWindow</code> method attaches a window to the system tray. The window will be shown when the system tray icon is clicked.</p>"},{"location":"API/systray/#windowoffset","title":"WindowOffset","text":"<p>API: <code>WindowOffset(offset int) *SystemTray</code></p> <p>The <code>WindowOffset</code> method sets the gap in pixels between the system tray and the window.</p>"},{"location":"API/systray/#windowdebounce","title":"WindowDebounce","text":"<p>API: <code>WindowDebounce(debounce time.Duration) *SystemTray</code></p> <p>The <code>WindowDebounce</code> method sets a debounce time. In the context of Windows, this is used to specify how long to wait before responding to a mouse up event on the notification icon.</p>"},{"location":"API/systray/#openmenu","title":"OpenMenu","text":"<p>API: <code>OpenMenu()</code></p> <p>The <code>OpenMenu</code> method opens the menu associated with the system tray.</p>"},{"location":"API/window/","title":"Window","text":"<p>To create a window, use Application.NewWebviewWindow or Application.NewWebviewWindowWithOptions. The former creates a window with default options, while the latter allows you to specify custom options.</p> <p>These methods are callable on the returned WebviewWindow object:</p>"},{"location":"API/window/#settitle","title":"SetTitle","text":"<p>API: <code>SetTitle(title string) *WebviewWindow</code></p> <p>This method updates the window title to the provided string. It returns the WebviewWindow object, allowing for method chaining.</p>"},{"location":"API/window/#name","title":"Name","text":"<p>API: <code>Name() string</code></p> <p>This function returns the name of the WebviewWindow.</p>"},{"location":"API/window/#setsize","title":"SetSize","text":"<p>API: <code>SetSize(width, height int) *WebviewWindow</code></p> <p>This method sets the size of the WebviewWindow to the provided width and height parameters. If the dimensions provided exceed the constraints, they are adjusted appropriately.</p>"},{"location":"API/window/#setalwaysontop","title":"SetAlwaysOnTop","text":"<p>API: <code>SetAlwaysOnTop(b bool) *WebviewWindow</code></p> <p>This function sets the window to stay on top based on the boolean flag provided.</p>"},{"location":"API/window/#show","title":"Show","text":"<p>API: <code>Show() *WebviewWindow</code></p> <p><code>Show</code> method is used to make the window visible. If the window is not running, it first invokes the <code>run</code> method to start the window and then makes it visible.</p>"},{"location":"API/window/#hide","title":"Hide","text":"<p>API: <code>Hide() *WebviewWindow</code></p> <p><code>Hide</code> method is used to hide the window. It sets the hidden status of the window to true and emits the window hide event.</p>"},{"location":"API/window/#seturl","title":"SetURL","text":"<p>API: <code>SetURL(s string) *WebviewWindow</code></p> <p><code>SetURL</code> method is used to set the URL of the window to the given URL string.</p>"},{"location":"API/window/#setzoom","title":"SetZoom","text":"<p>API: <code>SetZoom(magnification float64) *WebviewWindow</code></p> <p><code>SetZoom</code> method sets the zoom level of the window content to the provided magnification level.</p>"},{"location":"API/window/#getzoom","title":"GetZoom","text":"<p>API: <code>GetZoom() float64</code></p> <p><code>GetZoom</code> function returns the current zoom level of the window content.</p>"},{"location":"API/window/#getscreen","title":"GetScreen","text":"<p>API: <code>GetScreen() (*Screen, error)</code></p> <p><code>GetScreen</code> method returns the screen on which the window is displayed.</p>"},{"location":"API/window/#setframeless","title":"SetFrameless","text":"<p>API: <code>SetFrameless(frameless bool) *WebviewWindow</code></p> <p>This function is used to remove the window frame and title bar. It toggles the framelessness of the window according to the boolean value provided (true for frameless, false for framed).</p>"},{"location":"API/window/#registercontextmenu","title":"RegisterContextMenu","text":"<p>API: <code>RegisterContextMenu(name string, menu *Menu)</code></p> <p>This function is used to register a context menu and assigns it the given name.</p>"},{"location":"API/window/#nativewindowhandle","title":"NativeWindowHandle","text":"<p>API: <code>NativeWindowHandle() (uintptr, error)</code></p> <p>This function is used to fetch the platform native window handle for the window.</p>"},{"location":"API/window/#focus","title":"Focus","text":"<p>API: <code>Focus()</code></p> <p>This function is used to focus the window.</p>"},{"location":"API/window/#setenabled","title":"SetEnabled","text":"<p>API: <code>SetEnabled(enabled bool)</code></p> <p>This function is used to enable/disable the window based on the provided boolean value.</p>"},{"location":"API/window/#setabsoluteposition","title":"SetAbsolutePosition","text":"<p>API: <code>SetAbsolutePosition(x int, y int)</code></p> <p>This function sets the absolute position of the window in the screen.</p>"},{"location":"development/changes/","title":"Changes for v3","text":"<p>!!! note This is currently an unsorted brain dump of changes. It will be organised into a more readable format soon.</p>"},{"location":"development/changes/#options","title":"Options","text":"<p>The application options have been revised since v2.</p>"},{"location":"development/changes/#events","title":"Events","text":"<p>In v3, there are 3 types of events:</p> <ul> <li>Application Events</li> <li>Window Events</li> <li>Custom Events</li> </ul>"},{"location":"development/changes/#application-events","title":"Application Events","text":"<p>Application events are events that are emitted by the application. These events include native events such as <code>ApplicationDidFinishLaunching</code> on macOS.</p>"},{"location":"development/changes/#window-events","title":"Window Events","text":"<p>Window events are events that are emitted by a window. These events include native events such as <code>WindowDidBecomeMain</code> on macOS. Common events are also defined, so they work cross-platform, e.g. <code>WindowClosing</code>.</p>"},{"location":"development/changes/#custom-events","title":"Custom Events","text":"<p>Events that the user defines are called <code>WailsEvents</code>. This is to differentiate them from the <code>Event</code> object that is used to communicate with the browser. WailsEvents are now objects that encapsulate all the details of an event. This includes the event name, the data, and the source of the event.</p> <p>The data associated with a WailsEvent is now a single value. If multiple values are required, then a struct can be used.</p>"},{"location":"development/changes/#event-callbacks-and-emit-function-signature","title":"Event callbacks and <code>Emit</code> function signature","text":"<p>The signatures events callbacks (as used by <code>On</code>, <code>Once</code> &amp; <code>OnMultiple</code>) have changed. In v2, the callback function received optional data. In v3, the callback function receives a <code>WailsEvent</code> object that contains all data related to the event.</p> <p>Similarly, the <code>Emit</code> function has changed. Instead of taking a name and optional data, it now takes a single <code>WailsEvent</code> object that it will emit.</p>"},{"location":"development/changes/#off-and-offall","title":"<code>Off</code> and <code>OffAll</code>","text":"<p>In v2, <code>Off</code> and <code>OffAll</code> calls would remove events in both JS and Go. Due to the multi-window nature of v3, this has been changed so that these methods only apply to the context they are called in. For example, if you call <code>Off</code> in a window, it will only remove events for that window. If you use <code>Off</code> in Go, it will only remove events for Go.</p>"},{"location":"development/changes/#hooks","title":"Hooks","text":"<p>Event Hooks are a new feature in v3. They allow you to hook into the event system and perform actions when certain events are emitted. For example, you can hook into the <code>WindowClosing</code> event and perform some cleanup before the window closes. Hooks can be registered at the application level or at the window level using <code>RegisterHook</code>. Application level are for application events. Window level hooks will only be called for the window they are registered with.</p>"},{"location":"development/changes/#logging","title":"Logging","text":"<p>Logging in v2 was confusing as both application logs and system (internal) logs were using the same logger. We have simplified this as follows:</p> <ul> <li>Internal logs are now handled using the standard Go <code>slog</code> logger. This is   configured using the <code>logger</code> option in the application options. By default,   this uses the tint logger.</li> <li>Application logs can now be achieved through the new <code>log</code> plugin which   utilises <code>slog</code> under the hood. This plugin provides a simple API for logging   to the console. It is available in both Go and JS.</li> </ul>"},{"location":"development/changes/#developer-notes","title":"Developer notes","text":"<p>When emitting an event in Go, it will dispatch the event to local Go listeners and also each window in the application. When emitting an event in JS, it now sends the event to the application. This will be processed as if it was emitted in Go, however the sender ID will be that of the window.</p>"},{"location":"development/changes/#window","title":"Window","text":"<p>The Window API has largely remained the same, however the methods are now on an instance of a window rather than the runtime. Some notable differences are:</p> <ul> <li>Windows now have a Name that identifies them. This is used to identify the   window when emitting events.</li> <li>Windows have even more methods on the that were previously unavailable, such   as <code>AbsolutePosition</code> and <code>ToggleDevTools</code>.</li> <li>Windows can now accept files via native drag and drop. See the Drag and Drop   section for more details.</li> </ul>"},{"location":"development/changes/#clipboard","title":"ClipBoard","text":"<p>The clipboard API has been simplified. There is now a single <code>Clipboard</code> object that can be used to read and write to the clipboard. The <code>Clipboard</code> object is available in both Go and JS. <code>SetText()</code> to set the text and <code>Text()</code> to get the text.</p>"},{"location":"development/changes/#bindings","title":"Bindings","text":"<p>Bindings work in a similar way to v2, by providing a means to bind struct methods to the frontend. These can be called in the frontend using the binding wrappers generated by the <code>wails3 generate bindings</code> command:</p> <pre><code>// @ts-check\n// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH \u00c2 MODIWL\n// This file is automatically generated. DO NOT EDIT\nimport { main } from \"./models\";\nwindow.go = window.go || {};\nwindow.go.main = {\nGreetService: {\n/**\n     * GreetService.Greet\n     * Greet greets a person\n     * @param name {string}\n     * @returns {Promise&lt;string&gt;}\n     **/\nGreet: function (name) {\nwails.CallByID(1411160069, ...Array.prototype.slice.call(arguments, 0));\n},\n/**\n     * GreetService.GreetPerson\n     * GreetPerson greets a person\n     * @param person {main.Person}\n     * @returns {Promise&lt;string&gt;}\n     **/\nGreetPerson: function (person) {\nwails.CallByID(4021313248, ...Array.prototype.slice.call(arguments, 0));\n},\n},\n};\n</code></pre> <p>Bound methods are obfuscated by default, and are identified using uint32 IDs, calculated using the FNV hashing algorithm. This is to prevent the method name from being exposed in production builds. In debug mode, the method IDs are logged along with the calculated ID of the method to aid in debugging. If you wish to add an extra layer of obfuscation, you can use the <code>BindAliases</code> option. This allows you to specify a map of alias IDs to method IDs. When the frontend calls a method using an ID, the method ID will be looked up in the alias map first for a match. If it does not find it, it assumes it's a standard method ID and tries to find the method in the usual way.</p> <p>Example:</p> <pre><code>    app := application.New(application.Options{\nBind: []any{\n&amp;GreetService{},\n},\nBindAliases: map[uint32]uint32{\n1: 1411160069,\n2: 4021313248,\n},\nAssets: application.AssetOptions{\nFS: assets,\n},\nMac: application.MacOptions{\nApplicationShouldTerminateAfterLastWindowClosed: true,\n},\n})\n</code></pre> <p>We can now call using this alias in the frontend: <code>wails.Call(1, \"world!\")</code>.</p>"},{"location":"development/changes/#insecure-calls","title":"Insecure calls","text":"<p>If you don't mind your calls being available in plain text in your binary and have no intention of using garble, then you can use the insecure <code>wails.CallByName()</code> method. This method takes the fully qualified name of the method to call and the arguments to pass to it. Example:</p> <pre><code>```go\nwails.CallByName(\"main.GreetService.Greet\", \"world!\")\n```\n</code></pre> <p>Danger</p> <p>This is only provided as a convenience method for development. It is not recommended to use this in production.</p>"},{"location":"development/changes/#dialogs","title":"Dialogs","text":"<p>Dialogs are now available in JavaScript!</p>"},{"location":"development/changes/#windows","title":"Windows","text":"<p>Dialog buttons in Windows are not configurable and are constant depending on the type of dialog. To trigger a callback when a button is pressed, create a button with the same name as the button you wish to have the callback attached to. Example: Create a button with the label <code>Ok</code> and use <code>OnClick()</code> to set the callback method:</p> <pre><code>        dialog := app.QuestionDialog().\nSetTitle(\"Update\").\nSetMessage(\"The cancel button is selected when pressing escape\")\nok := dialog.AddButton(\"Ok\")\nok.OnClick(func() {\n// Do something\n})\nno := dialog.AddButton(\"Cancel\")\ndialog.SetDefaultButton(ok)\ndialog.SetCancelButton(no)\ndialog.Show()\n</code></pre>"},{"location":"development/changes/#drag-and-drop","title":"Drag and Drop","text":"<p>Native drag and drop can be enabled per-window. Simply set the <code>EnableDragAndDrop</code> window config option to <code>true</code> and the window will allow files to be dragged onto it. When this happens, the <code>events.FilesDropped</code> event will be emitted. The filenames can then be retrieved from the <code>WindowEvent.Context()</code> using the <code>DroppedFiles()</code> method. This returns a slice of strings containing the filenames.</p>"},{"location":"development/changes/#context-menus","title":"Context Menus","text":"<p>Context menus are contextual menus that are shown when the user right-clicks on an element. Creating a context menu is the same as creating a standard menu , by using <code>app.NewMenu()</code>. To make the context menu available to a window, call <code>window.RegisterContextMenu(name, menu)</code>. The name will be the id of the context menu and used by the frontend.</p> <p>To indicate that an element has a context menu, add the <code>data-contextmenu</code> attribute to the element. The value of this attribute should be the name of a context menu previously registered with the window.</p> <p>It is possible to register a context menu at the application level, making it available to all windows. This can be done using <code>app.RegisterContextMenu(name, menu)</code>. If a context menu cannot be found at the window level, the application context menus will be checked. A demo of this can be found in <code>v3/examples/contextmenus</code>.</p>"},{"location":"development/changes/#wails-markup-language-wml","title":"Wails Markup Language (WML)","text":"<p>The Wails Markup Language is a simple markup language that allows you to add functionality to standard HTML elements without the use of Javascript.</p> <p>The following tags are currently supported:</p>"},{"location":"development/changes/#data-wml-event","title":"<code>data-wml-event</code>","text":"<p>This specifies that a Wails event will be emitted when the element is clicked. The value of the attribute should be the name of the event to emit.</p> <p>Example:</p> <pre><code>&lt;button data-wml-event=\"myevent\"&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Sometimes you need the user to confirm an action. This can be done by adding the <code>data-wml-confirm</code> attribute to the element. The value of this attribute will be the message to display to the user.</p> <p>Example:</p> <pre><code>&lt;button data-wml-event=\"delete-all-items\" data-wml-confirm=\"Are you sure?\"&gt;\n  Delete All Items\n&lt;/button&gt;\n</code></pre>"},{"location":"development/changes/#data-wml-window","title":"<code>data-wml-window</code>","text":"<p>Any <code>wails.window</code> method can be called by adding the <code>data-wml-window</code> attribute to an element. The value of the attribute should be the name of the method to call. The method name should be in the same case as the method.</p> <pre><code>&lt;button data-wml-window=\"Close\"&gt;Close Window&lt;/button&gt;\n</code></pre>"},{"location":"development/changes/#data-wml-trigger","title":"<code>data-wml-trigger</code>","text":"<p>This attribute specifies which javascript event should trigger the action. The default is <code>click</code>.</p> <pre><code>&lt;button data-wml-event=\"hover-box\" data-wml-trigger=\"mouseover\"&gt;\n  Hover over me!\n&lt;/button&gt;\n</code></pre>"},{"location":"development/changes/#systray","title":"Systray","text":"<p>Wails 3 comes with a built-in systray. This is a fully featured systray that has been designed to be as simple as possible to use. It is possible to set the icon, tooltip and menu of the systray. It is possible to also \"attach\" a window to the systray. Doing this will provide the following functionality:</p> <ul> <li>Clicking the systray icon with toggle the window visibility</li> <li>Right-clicking the systray will open the menu, if there is one</li> </ul> <p>On macOS, if there is no attached window, the systray will use the default method of displaying the menu (any button). If there is an attached window but no menu, the systray will toggle the window regardless of the button pressed.</p>"},{"location":"development/changes/#plugins","title":"Plugins","text":"<p>Plugins are a way to extend the functionality of your Wails application.</p>"},{"location":"development/changes/#creating-a-plugin","title":"Creating a plugin","text":"<p>Plugins are standard Go structure that adhere to the following interface:</p> <pre><code>type Plugin interface {\nName() string\nInit(*application.App) error\nShutdown()\nCallableByJS() []string\nInjectJS() string\n}\n</code></pre> <p>The <code>Name()</code> method returns the name of the plugin. This is used for logging purposes.</p> <p>The <code>Init(*application.App) error</code> method is called when the plugin is loaded. The <code>*application.App</code> parameter is the application that the plugin is being loaded into. Any errors will prevent the application from starting.</p> <p>The <code>Shutdown()</code> method is called when the application is shutting down.</p> <p>The <code>CallableByJS()</code> method returns a list of exported functions that can be called from the frontend. These method names must exactly match the names of the methods exported by the plugin.</p> <p>The <code>InjectJS()</code> method returns JavaScript that should be injected into all windows as they are created. This is useful for adding custom JavaScript functions that complement the plugin.</p>"},{"location":"development/changes/#tips","title":"Tips","text":""},{"location":"development/changes/#enums","title":"Enums","text":"<p>In Go, enums are often defined as a type and a set of constants. For example:</p> <pre><code>type MyEnum int\nconst (\nMyEnumOne MyEnum = iota\nMyEnumTwo\nMyEnumThree\n)\n</code></pre> <p>Due to incompatibility between Go and JavaScript, custom types cannot be used in this way. The best strategy is to use a type alias for float64:</p> <pre><code>type MyEnum = float64\nconst (\nMyEnumOne MyEnum = iota\nMyEnumTwo\nMyEnumThree\n)\n</code></pre> <p>In Javascript, you can then use the following:</p> <pre><code>const MyEnum = {\nMyEnumOne: 0,\nMyEnumTwo: 1,\nMyEnumThree: 2,\n};\n</code></pre> <ul> <li>Why use <code>float64</code>? Can't we use <code>int</code>?</li> <li>Because JavaScript doesn't have a concept of <code>int</code>. Everything is a     <code>number</code>, which translates to <code>float64</code> in Go. There are also restrictions     on casting types in Go's reflection package, which means using <code>int</code> doesn't     work.</li> </ul>"},{"location":"development/changes/#backgroundcolour","title":"BackgroundColour","text":"<p>In v2, this was a pointer to an <code>RGBA</code> struct. In v3, this is an <code>RGBA</code> struct value.</p>"},{"location":"development/changes/#windowistranslucent","title":"WindowIsTranslucent","text":"<p>This flag has been removed. Now there is a <code>BackgroundType</code> flag that can be used to set the type of background the window should have. This flag can be set to any of the following values:</p> <ul> <li><code>BackgroundTypeSolid</code> - The window will have a solid background</li> <li><code>BackgroundTypeTransparent</code> - The window will have a transparent background</li> <li><code>BackgroundTypeTranslucent</code> - The window will have a translucent background</li> </ul> <p>On Windows, if the <code>BackgroundType</code> is set to <code>BackgroundTypeTranslucent</code>, the type of translucency can be set using the <code>BackdropType</code> flag in the <code>WindowsWindow</code> options. This can be set to any of the following values:</p> <ul> <li><code>Auto</code> - The window will use an effect determined by the system</li> <li><code>None</code> - The window will have no background</li> <li><code>Mica</code> - The window will use the Mica effect</li> <li><code>Acrylic</code> - The window will use the acrylic effect</li> <li><code>Tabbed</code> - The window will use the tabbed effect</li> </ul>"},{"location":"development/changes/#windows-application-options","title":"Windows Application Options","text":""},{"location":"development/changes/#wndprocinterceptor","title":"WndProcInterceptor","text":"<p>If this is set, the WndProc will be intercepted and the function will be called. This allows you to handle Windows messages directly. The function should have the following signature:</p> <pre><code>func(hwnd uintptr, msg uint32, wParam, lParam uintptr) (returnValue uintptr, shouldReturn)\n</code></pre> <p>The <code>shouldReturn</code> value should be set to <code>true</code> if the returnValue should be returned by the main wndProc method. If it is set to <code>false</code>, the return value will be ignored and the message will continue to be processed by the main wndProc method.</p>"},{"location":"development/changes/#hide-window-on-close-onbeforeclose","title":"Hide Window on Close + OnBeforeClose","text":"<p>In v2, there was the <code>HideWindowOnClose</code> flag to hide the window when it closed. There was a logical overlap between this flag and the <code>OnBeforeClose</code> callback. In v3, the <code>HideWindowOnClose</code> flag has been removed and the <code>OnBeforeClose</code> callback has been renamed to <code>ShouldClose</code>. The <code>ShouldClose</code> callback is called when the user attempts to close a window. If the callback returns <code>true</code>, the window will close. If it returns <code>false</code>, the window will not close. This can be used to hide the window instead of closing it.</p>"},{"location":"development/changes/#window-drag","title":"Window Drag","text":"<p>In v2, the <code>--wails-drag</code> attribute was used to indicate that an element could be used to drag the window. In v3, this has been replaced with <code>--webkit-app-region</code> to be more in line with the way other frameworks handle this. The <code>--webkit-app-region</code> attribute can be set to any of the following values:</p> <ul> <li><code>drag</code> - The element can be used to drag the window</li> <li><code>no-drag</code> - The element cannot be used to drag the window</li> </ul> <p>We would have ideally liked to use <code>app-region</code>, however this is not supported by the <code>getComputedStyle</code> call on webkit on macOS.</p>"},{"location":"development/introduction/","title":"Introduction","text":"<p>!!! note This guide is a work in progress.</p> <p>Thanks for wanting to help out with development of Wails! This guide will help you get started.</p>"},{"location":"development/introduction/#getting-started","title":"Getting Started","text":"<ul> <li>Git clone this repository. Checkout the <code>v3-alpha</code> branch.</li> <li> <p>Install the CLI: <code>cd v3/cmd/wails3 &amp;&amp; go install</code></p> </li> <li> <p>Optional: If you are wanting to use the build system to build frontend code,   you will need to install npm.</p> </li> </ul>"},{"location":"development/introduction/#building","title":"Building","text":"<p>For simple programs, you can use the standard <code>go build</code> command. It's also possible to use <code>go run</code>.</p> <p>Wails also comes with a build system that can be used to build more complex projects. It utilises the awesome Task build system. For more information, check out the task homepage or run <code>wails task --help</code>.</p>"},{"location":"development/introduction/#project-layout","title":"Project layout","text":"<p>The project has the following structure:</p> <pre><code>```\nv3\n\u251c\u2500\u2500 cmd/wails3                  // CLI\n\u251c\u2500\u2500 examples                   // Examples of Wails apps\n\u251c\u2500\u2500 internal                   // Internal packages\n|   \u251c\u2500\u2500 runtime                // The Wails JS runtime\n|   \u2514\u2500\u2500 templates              // The supported project templates\n\u251c\u2500\u2500 pkg\n|   \u251c\u2500\u2500 application            // The core Wails library\n|   \u2514\u2500\u2500 events                 // The event definitions\n|   \u2514\u2500\u2500 mac                    // macOS specific code used by plugins\n|   \u2514\u2500\u2500 w32                    // Windows specific code\n\u251c\u2500\u2500 plugins                    // Supported plugins\n\u251c\u2500\u2500 tasks                      // General tasks\n\u2514\u2500\u2500 Taskfile.yaml              // Development tasks configuration\n```\n</code></pre>"},{"location":"development/introduction/#development","title":"Development","text":""},{"location":"development/introduction/#adding-window-functionality","title":"Adding window functionality","text":"<p>The preferred way to add window functionality is to add a new function to the <code>pkg/application/webview_window.go</code> file. This should implement all the functionality required for all platforms. Any platform specific code should be called via a <code>webviewWindowImpl</code> interface method. This interface is implemented by each of the target platforms to provide the platform specific functionality. In some cases, this may do nothing. Once you've added the interface method, ensure each platform implements it. A good example of this is the <code>SetMinSize</code> method.</p> <ul> <li>Mac: <code>webview_window_darwin.go</code></li> <li>Windows: <code>webview_window_windows.go</code></li> <li>Linux: <code>webview_window_linux.go</code></li> </ul> <p>Most, if not all, of the platform specific code should be run on the main thread. To simplify this, there are a number of <code>invokeSync</code> methods defined in <code>application.go</code>.</p>"},{"location":"development/introduction/#updating-the-runtime","title":"Updating the runtime","text":"<p>The runtime is located in <code>v3/internal/runtime</code>. When the runtime is updated, the following steps need to be taken:</p> <pre><code>wails3 task runtime:build\n</code></pre>"},{"location":"development/introduction/#events","title":"Events","text":"<p>Events are defined in <code>v3/pkg/events</code>. When adding a new event, the following steps need to be taken:</p> <ul> <li>Add the event to the <code>events.txt</code> file</li> <li>Run <code>wails3 task events:generate</code></li> </ul> <p>There are a number of types of events: platform specific application and window events + common events. The common events are useful for cross-platform event handling, but you aren't limited to the \"lowest common denominator\". You can use the platform specific events if you need to.</p> <p>When adding a common event, ensure that the platform specific events are mapped. An example of this is in <code>window_webview_darwin.go</code>:</p> <pre><code>        // Translate ShouldClose to common WindowClosing event\nw.parent.On(events.Mac.WindowShouldClose, func(_ *WindowEventContext) {\nw.parent.emit(events.Common.WindowClosing)\n})\n</code></pre> <p>NOTE: We may try to automate this in the future by adding the mapping to the event definition.</p>"},{"location":"development/introduction/#plugins","title":"Plugins","text":"<p>Plugins are a way to extend the functionality of your Wails application.</p>"},{"location":"development/introduction/#creating-a-plugin","title":"Creating a plugin","text":"<p>Plugins are standard Go structure that adhere to the following interface:</p> <pre><code>type Plugin interface {\nName() string\nInit(*application.App) error\nShutdown()\nCallableByJS() []string\nInjectJS() string\n}\n</code></pre> <p>The <code>Name()</code> method returns the name of the plugin. This is used for logging purposes.</p> <p>The <code>Init(*application.App) error</code> method is called when the plugin is loaded. The <code>*application.App</code> parameter is the application that the plugin is being loaded into. Any errors will prevent the application from starting.</p> <p>The <code>Shutdown()</code> method is called when the application is shutting down.</p> <p>The <code>CallableByJS()</code> method returns a list of exported functions that can be called from the frontend. These method names must exactly match the names of the methods exported by the plugin.</p> <p>The <code>InjectJS()</code> method returns JavaScript that should be injected into all windows as they are created. This is useful for adding custom JavaScript functions that complement the plugin.</p>"},{"location":"development/introduction/#misc-tasks","title":"Misc Tasks","text":""},{"location":"development/introduction/#upgrading-taskfile","title":"Upgrading Taskfile","text":"<p>The Wails CLI uses the Task build system. It is imported as a library and used to run the tasks defined in <code>Taskfile.yaml</code>. The main interfacing with Task happens in <code>v3/internal/commands/task.go</code>.</p> <p>To check if there's an upgrade for Taskfile, run <code>wails3 task -version</code> and check against the Task website.</p> <p>To upgrade the version of Taskfile used, run:</p> <pre><code>wails3 task taskfile:upgrade\n</code></pre> <p>If there are incompatibilities then they should appear in the <code>v3/internal/commands/task.go</code> file.</p> <p>Usually the best way to fix incompatibilities is to clone the task repo at <code>https://github.com/go-task/task</code> and look at the git history to determine what has changed and why.</p> <p>To check all changes have worked correctly, re-install the CLI and check the version again:</p> <pre><code>wails3 task cli:install\nwails3 task -version\n</code></pre>"},{"location":"development/introduction/#opening-a-pr","title":"Opening a PR","text":"<p>Make sure that all PRs have a ticket associated with them providing context to the change. If there is no ticket, please create one first. Ensure that all PRs have updated the CHANGELOG.md file with the changes made. The CHANGELOG.md file is located in the <code>v3</code> directory.</p>"},{"location":"development/introduction/#misc-tasks_1","title":"Misc Tasks","text":""},{"location":"development/introduction/#upgrading-taskfile_1","title":"Upgrading Taskfile","text":"<p>The Wails CLI uses the Task build system. It is imported as a library and used to run the tasks defined in <code>Taskfile.yaml</code>. The main interfacing with Task happens in <code>v3/internal/commands/task.go</code>.</p> <p>To check if there's an upgrade for Taskfile, run <code>wails3 task -version</code> and check against the Task website.</p> <p>To upgrade the version of Taskfile used, run:</p> <pre><code>wails3 task taskfile:upgrade\n</code></pre> <p>If there are incompatibilities then they should appear in the <code>v3/internal/commands/task.go</code> file.</p> <p>Usually the best way to fix incompatibilities is to clone the task repo at <code>https://github.com/go-task/task</code> and look at the git history to determine what has changed and why.</p> <p>To check all changes have worked correctly, re-install the CLI and check the version again:</p> <pre><code>wails3 task cli:install\nwails3 task -version\n</code></pre>"},{"location":"development/status/","title":"Status","text":"<p>Status of features in v3.</p> <p>Note<p>This list is a mixture of public and internal API support. It is not complete and probably not up to date.</p> </p>"},{"location":"development/status/#known-issues","title":"Known Issues","text":"<ul> <li>Linux is not yet up to feature parity with Windows/Mac</li> </ul>"},{"location":"development/status/#application","title":"Application","text":"<p>Application interface methods</p> Method Windows Linux Mac Notes run() error Y Y Y destroy() Y Y setApplicationMenu(menu *Menu) Y Y Y name() string Y Y getCurrentWindowID() uint Y Y Y showAboutDialog(name string, description string, icon []byte) Y Y setIcon(icon []byte) - Y Y on(id uint) Y dispatchOnMainThread(fn func()) Y Y Y hide() Y Y Y show() Y Y Y getPrimaryScreen() (*Screen, error) Y Y getScreens() ([]*Screen, error) Y Y"},{"location":"development/status/#webview-window","title":"Webview Window","text":"<p>Webview Window Interface Methods</p> Method Windows Linux Mac Notes center() Y Y Y close() y Y Y destroy() Y Y execJS(js string) y Y Y focus() Y Y forceReload() Y Y fullscreen() Y Y Y getScreen() (*Screen, error) y Y Y getZoom() float64 Y Y height() int Y Y Y hide() Y Y Y isFullscreen() bool Y Y Y isMaximised() bool Y Y Y isMinimised() bool Y Y Y maximise() Y Y Y minimise() Y Y Y nativeWindowHandle() (uintptr, error) Y Y on(eventID uint) y Y openContextMenu(menu Menu, data ContextMenuData) y Y relativePosition() (int, int) Y Y Y reload() y Y Y run() Y Y Y setAlwaysOnTop(alwaysOnTop bool) Y Y Y setBackgroundColour(color RGBA) Y Y Y setEnabled(bool) Y Y setFrameless(bool) Y Y setFullscreenButtonEnabled(enabled bool) - Y Y There is no fullscreen button in Windows setHTML(html string) Y Y Y setMaxSize(width, height int) Y Y Y setMinSize(width, height int) Y Y Y setRelativePosition(x int, y int) Y Y Y setResizable(resizable bool) Y Y Y setSize(width, height int) Y Y Y setTitle(title string) Y Y Y setURL(url string) Y Y Y setZoom(zoom float64) Y Y Y show() Y Y Y size() (int, int) Y Y Y toggleDevTools() Y Y Y unfullscreen() Y Y Y unmaximise() Y Y Y unminimise() Y Y Y width() int Y Y Y zoom() Y Y zoomIn() Y Y Y zoomOut() Y Y Y zoomReset() Y Y Y"},{"location":"development/status/#runtime","title":"Runtime","text":""},{"location":"development/status/#application_1","title":"Application","text":"Feature Windows Linux Mac Notes Quit Y Y Y Hide Y Y Show Y Y"},{"location":"development/status/#dialogs","title":"Dialogs","text":"Feature Windows Linux Mac Notes Info Y Y Y Warning Y Y Y Error Y Y Y Question Y Y Y OpenFile Y Y SaveFile Y Y"},{"location":"development/status/#clipboard","title":"Clipboard","text":"Feature Windows Linux Mac Notes SetText Y Y Text Y Y"},{"location":"development/status/#contextmenu","title":"ContextMenu","text":"Feature Windows Linux Mac Notes OpenContextMenu Y Y On By Default Control via HTML Y <p>The default context menu is enabled by default for all elements that are <code>contentEditable: true</code>, <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> tags or have the <code>--default-contextmenu: true</code> style set. The <code>--default-contextmenu: show</code> style will always show the context menu The <code>--default-contextmenu: hide</code> style will always hide the context menu</p> <p>Anything nested under a tag with <code>--default-contextmenu: hide</code> style will not show the context menu unless it is explicitly set with <code>--default-contextmenu: show</code>.</p>"},{"location":"development/status/#screens","title":"Screens","text":"Feature Windows Linux Mac Notes GetAll Y Y Y GetPrimary Y Y Y GetCurrent Y Y Y"},{"location":"development/status/#system","title":"System","text":"Feature Windows Linux Mac Notes IsDarkMode Y"},{"location":"development/status/#window","title":"Window","text":"<p>Y = Supported U = Untested</p> <ul> <li>= Not available</li> </ul> Feature Windows Linux Mac Notes Center Y Y Y Focus Y Y FullScreen Y Y Y GetZoom Y Y Y Get current view scale Height Y Y Y Hide Y Y Y Maximise Y Y Y Minimise Y Y Y RelativePosition Y Y Y Screen Y Y Y Get screen for window SetAlwaysOnTop Y Y Y SetBackgroundColour Y Y Y https://github.com/MicrosoftEdge/WebView2Feedback/issues/1621#issuecomment-938234294 SetEnabled Y U U Set the window to be enabled/disabled SetMaxSize Y Y Y SetMinSize Y Y Y SetRelativePosition Y Y Y SetResizable Y Y Y SetSize Y Y Y SetTitle Y Y Y SetZoom Y Y Y Set view scale Show Y Y Y Size Y Y Y UnFullscreen Y Y Y UnMaximise Y Y Y UnMinimise Y Y Y Width Y Y Y ZoomIn Y Y Y Increase view scale ZoomOut Y Y Y Decrease view scale ZoomReset Y Y Y Reset view scale"},{"location":"development/status/#window-options","title":"Window Options","text":"<p>A 'Y' in the table below indicates that the option has been tested and is applied when the window is created. An 'X' indicates that the option is not supported by the platform.</p> Feature Windows Linux Mac Notes AlwaysOnTop Y BackgroundColour Y Y BackgroundType Acrylic seems to work but the others don't CSS Y Y DevToolsEnabled Y Y Y DisableResize Y Y EnableDragAndDrop Y EnableFraudulentWebsiteWarnings Focused Y Y Frameless Y Y FullscreenButtonEnabled Y Height Y Y Hidden Y Y HTML Y Y JS Y Y Mac - - MaxHeight Y Y MaxWidth Y Y MinHeight Y Y MinWidth Y Y Name Y Y OpenInspectorOnStartup StartState Y Title Y Y URL Y Y Width Y Y Windows Y - - X Y Y Y Y Y Zoom ZoomControlEnabled"},{"location":"development/status/#log","title":"Log","text":"<p>To log or not to log? System logger vs custom logger.</p>"},{"location":"development/status/#menu","title":"Menu","text":"Event Windows Linux Mac Notes Default Application Menu Y Y Y"},{"location":"development/status/#tray-menus","title":"Tray Menus","text":"Feature Windows Linux Mac Notes Icon Y Y Windows has default icons for light/dark mode &amp; supports PNG or ICO. Label - Y Label (ANSI Codes) - Menu Y Y"},{"location":"development/status/#methods","title":"Methods","text":"Method Windows Linux Mac Notes setLabel(label string) - Y run() Y Y setIcon(icon []byte) Y Y setMenu(menu *Menu) Y Y setIconPosition(position int) - Y setTemplateIcon(icon []byte) - Y destroy() Y Y setDarkModeIcon(icon []byte) Y Y"},{"location":"development/status/#cross-platform-events","title":"Cross Platform Events","text":"<p>Mapping native events to cross-platform events.</p> Event Windows Linux Mac Notes WindowWillClose WindowWillClose WindowDidClose WindowDidResize WindowDidHide ApplicationWillTerminate <p>... Add more</p>"},{"location":"development/status/#bindings-generation","title":"Bindings Generation","text":"<p>Working well.</p>"},{"location":"development/status/#models-generation","title":"Models Generation","text":"<p>Working well.</p>"},{"location":"development/status/#task-file","title":"Task file","text":"<p>Contains a lot needed for development.</p>"},{"location":"development/status/#theme","title":"Theme","text":"Mode Windows Linux Mac Notes Dark Y Light Y System Y"},{"location":"development/status/#nsis-installer","title":"NSIS Installer","text":"<p>TBD</p>"},{"location":"development/status/#templates","title":"Templates","text":"<p>All templates are working.</p>"},{"location":"development/status/#plugins","title":"Plugins","text":"<p>Built-in plugin support:</p> Plugin Windows Linux Mac Notes Browser Y Y KV Store Y Y Y Log Y Y Y Single Instance Y Y SQLite Y Y Y Start at login Y Y Server <p>TODO:</p> <ul> <li>Ensure each plugin has a JS wrapper that can be injected into the window.</li> </ul>"},{"location":"development/status/#packaging","title":"Packaging","text":"Windows Linux Mac Notes Icon Generation Y Y Icon Embedding Y Y Info.plist - Y NSIS Installer - Mac bundle - Y Windows exe Y -"},{"location":"development/status/#frameless-windows","title":"Frameless Windows","text":"Feature Windows Linux Mac Notes Resize Y Y Drag Y Y Y Linux - can always drag with <code>Meta</code>+left mouse"},{"location":"development/status/#mac-specific","title":"Mac Specific","text":"<ul> <li> Translucency</li> </ul>"},{"location":"development/status/#mac-options","title":"Mac Options","text":"Feature Default Notes Backdrop MacBackdropNormal Standard solid window DisableShadow false TitleBar Standard window decorations by default Appearance DefaultAppearance InvisibleTitleBarHeight 0 Creates an invisible title bar for frameless windows DisableShadow false Disables the window drop shadow"},{"location":"development/status/#windows-specific","title":"Windows Specific","text":"<ul> <li> Translucency</li> <li> Custom Themes</li> </ul>"},{"location":"development/status/#windows-options","title":"Windows Options","text":"Feature Default Notes BackdropType Solid DisableIcon false Theme SystemDefault CustomTheme nil DisableFramelessWindowDecorations false WindowMask nil Makes the window the contents of the bitmap"},{"location":"development/status/#linux-specific","title":"Linux Specific","text":"<p>Implementation details for the functions utilized by the <code>*_linux.go</code> files are located in the following files:</p> <ul> <li>linux_cgo.go: CGo implementation</li> <li>linux_purego.go: PureGo implementation</li> </ul>"},{"location":"development/status/#cgo","title":"CGO","text":"<p>By default CGO is utilized to compile the Linux port. This prevents easy cross-compilation and so the PureGo implementation is also being simultaneously developed.</p>"},{"location":"development/status/#purego","title":"Purego","text":"<p>The examples can be compiled using the following command:</p> <pre><code>CGO_ENABLED=0 go build -tags purego\n</code></pre> <p>Note: things are currently not working after the refactor</p>"},{"location":"development/status/#examples","title":"Examples","text":"Example Windows Linux Mac binding NO build Yes (Debug + Prod) clipboard Yes contextmenus Yes dialogs Almost drag-n-drop NO events NO frameless Yes kitchensink Yes menu Yes plain Yes plugins Yes screen Yes systray Yes Yes window Yes windowjs Example not complete wml Yes"},{"location":"development/status/#alpha-release-todo","title":"Alpha Release TODO","text":"<ul> <li> Check all runtime methods are available in the JS runtime</li> </ul>"},{"location":"development/status/#beta-release-todo","title":"Beta Release TODO","text":"<ul> <li> Make better looking examples</li> </ul>"},{"location":"getting-started/feedback/","title":"Feedback","text":"<p>We welcome (and encourage) your feedback! Here are the different ways to provide feedback:</p> BugsFixesSuggestionsUpvoting <p>If you find a bug, please let us know by posting into the v3 Alpha Feedback channel on Discord:</p> <ul> <li>The post should clearly state what the bug is and have a simple reproducible example. If the docs are unclear what should happen, please include that in the post.</li> <li>The post should be given the <code>Bug</code> tag.</li> <li>Please include the output of <code>wails doctor</code> in your post.</li> <li>Remember unexpected behaviour isn't necessarily a bug - it might just not do what you expect it to do. Use Suggestions for this.</li> </ul> <p>If you have a fix for a bug or an update for documentation, please do the following:</p> <ul> <li>Open a pull request on the Wails repository. The title of the PR should start with <code>[v3]</code>.</li> <li>Create a post in the v3 Alpha Feedback channel.</li> <li>The post should be given the <code>PR</code> tag.</li> <li>Please include a link to the PR in your post.</li> </ul> <p>If you have a suggestion, please let us know by posting into the v3 Alpha Feedback channel on Discord:</p> <ul> <li>The post should be given the <code>Suggestion</code> tag.</li> </ul> <p>Please feel free to reach out to us on Discord if you have any questions.</p> <ul> <li>Posts can be \"upvoted\" by using the  emoji. Please apply to any posts that are a priority for you.</li> <li>Please don't just add comments like \"+1\" or \"me too\".</li> <li>Please feel free to comment if there is more to add to the post, such as \"this bug also affect ARM builds\" or \"Another option would be to .....\"</li> </ul> <p>Things we are looking for feedback on:</p> <ul> <li>The API</li> <li>Is it easy to use?</li> <li>Does it do what you expect?</li> <li>Is it missing anything?</li> <li>Is there anything that should be removed?</li> <li>Is it consistent between Go and JS?</li> <li>The build system</li> <li>Is it easy to use?</li> <li>Can we improve it?</li> <li>The examples</li> <li>Are they clear?</li> <li>Do they cover the basics?</li> <li>Features</li> <li>What features are missing?</li> <li>What features are not needed?</li> <li>Documentation</li> <li>What could be clearer?</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>To install the Wails CLI, ensure you have Go 1.21+ installed and run:</p> <pre><code>go install github.com/wailsapp/wails/v3/cmd/wails3@latest\n</code></pre>"},{"location":"getting-started/installation/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>Windows 10/11 AMD64/ARM64</li> <li>MacOS 10.13+ AMD64</li> <li>MacOS 11.0+ ARM64</li> <li>Linux AMD64/ARM64</li> </ul>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>Wails has a number of common dependencies that are required before installation:</p> Go 1.21+npm (Optional)Task (Optional) <p>Download Go from the Go Downloads Page.</p> <p>Ensure that you follow the official Go installation instructions. You will also need to ensure that your <code>PATH</code> environment variable also includes the path to your <code>~/go/bin</code> directory. Restart your terminal and do the following checks:</p> <ul> <li>Check Go is installed correctly: <code>go version</code></li> <li>Check <code>~/go/bin</code> is in your PATH variable: <code>echo $PATH | grep go/bin</code></li> </ul> <p>Although Wails doesn't require npm to be installed, it is needed if you want to use the bundled templates.</p> <p>Download the latest node installer from the Node Downloads Page. It is best to use the latest release as that is what we generally test against.</p> <p>Run <code>npm --version</code> to verify.</p> <p>The Wails CLI embeds a task runner called Task. It is optional, but recommended. If you do not wish to install Task, you can use the <code>wails3 task</code> command instead of <code>task</code>. Installing Task will give you the greatest flexibility.</p>"},{"location":"getting-started/installation/#platform-specific-dependencies","title":"Platform Specific Dependencies","text":"<p>You will also need to install platform specific dependencies:</p> MacWindowsLinux <p>Wails requires that the xcode command line tools are installed. This can be done by running:</p> <pre><code>xcode-select --install\n</code></pre> <p>Wails requires that the WebView2 Runtime is installed. Some Windows installations will already have this installed. You can check using the <code>wails doctor</code> command.</p> <p>Linux requires the standard <code>gcc</code> build tools plus <code>libgtk3</code> and <code>libwebkit</code>. Rather than list a ton of commands for different distros, Wails can try to determine what the installation commands are for your specific distribution. Run <code>wails doctor</code> after installation to be shown how to install the dependencies. If your distro/package manager is not supported, please let us know on discord.</p>"},{"location":"getting-started/installation/#system-check","title":"System Check","text":"<p>Running <code>wails3 doctor</code> will check if you have the correct dependencies installed. If not, it will advise on what is missing and help on how to rectify any problems.</p>"},{"location":"getting-started/installation/#the-wails3-command-appears-to-be-missing","title":"The <code>wails3</code> command appears to be missing?","text":"<p>If your system is reporting that the <code>wails3</code> command is missing, check the following:</p> <ul> <li>Make sure you have followed the Go installation guide correctly.</li> <li>Check that the <code>go/bin</code> directory is in the <code>PATH</code> environment variable.</li> <li>Close/Reopen current terminals to pick up the new <code>PATH</code> variable.</li> </ul>"},{"location":"getting-started/next-steps/","title":"Next Steps","text":"<p>Now that you have Wails installed, you can start exploring the alpha version.</p> <p>The best place to start is the <code>examples</code> directory in the Wails repository. This contains a number of examples that you can run and play with.</p>"},{"location":"getting-started/next-steps/#running-an-example","title":"Running an example","text":"<p>To run an example, you can simply use:</p> <pre><code>go run .\n</code></pre> <p>in the example directory.</p>"},{"location":"getting-started/next-steps/#creating-a-new-project","title":"Creating a new project","text":"<p>To create a new project, you can use the <code>wails3 init</code> command. This will create a new project in the current directory.</p> <p>Wails3 uses Task as its build system by default, although there is no reason why you can't use your own build system, or use <code>go build</code> directly. Wails has the task build system built in and can be run using <code>wails3 task</code>.</p> <p>If you look through the <code>Taskfile.yaml</code> file, you will see that there are a number of tasks defined. The most important one is the <code>build</code> task. This is the task that is run when you use <code>wails3 build</code>.</p> <p>The task file is unlikely to be complete and is subject to change over time.</p>"},{"location":"getting-started/next-steps/#building-a-project","title":"Building a project","text":"<p>To build a project, you can use the <code>wails3 build</code> command. This is a shortcut for <code>wails3 task build</code>.</p>"}]}